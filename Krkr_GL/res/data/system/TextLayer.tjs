
class TextLayer extends KAGLayer
{
	var _labelGroup = [];
	var font = %[];//文字设定
	var currentPos = %[x:0,y:0];

	var delegate = void; //委托对象，通常都指向messageLayer
	function TextLayer (win,par) {
		super.KAGLayer(...);
		resetFont();
		delegate = parent;
		setSizeToParentSize(1,1);
	}

	function finalize () 
	{
		clear();
		super.finalize();
	}

	function assign (src) 
	{
		super.assign(src);
		clear();
		(Dictionary.clear incontextof font)();
		(Dictionary.assignStruct incontextof font)(src.font);
		currentPos.x = src.currentPos.x;
		currentPos.y = src.currentPos.y;
		delegate = parent;
		for (var i = 0; i < src._labelGroup.count; i++) {
			var label = new LabelLayer(window,this,font);
			_labelGroup.add(label);
			label.assign(src._labelGroup[i]);
			label.delegate = this.delegate;
			label.show();
		};
	}

	function pushText(text) 
	{
   		var label = new LabelLayer(window,this,font);
   		label.delegate = this.delegate;
   		label.maxWidth = width;
   		label.maxHeight = height;
   		label.startX = currentPos.x;
   		label.startY = currentPos.y;
   		_labelGroup.add(label);
   		label.text = text;
		currentPos.x = label.nextCharX;
		currentPos.y = label.nextCharY;
		if (font.chSpeed == 0 || window.skipByNoWait == true || window.skipByClick == true) 
		{
			label.show();
			window.waitStatus = 0;
	   		return 0;
		}
		else
		{
			label.show(font.chSpeed);
			var time = font.chSpeed * label.length;
			return time;
		}
	}

	function noWait () 
	{
		for (var i = 0; i < _labelGroup.count; i++) {
			_labelGroup[i].show();
		};
	}

	function clear () 
	{
		for (var i = 0; i < _labelGroup.count; i++) {
			invalidate _labelGroup[i];
		};
		_labelGroup.clear();
	}

	function resetFont () {
		font.fontName = window.defFont.face;
		font.fontSize = window.defFont.height;
		font.chSpeed = window.defStyle.chSpeed;
		font.noWait = window.defStyle.noWait;
		font.charSpacing = window.defStyle.charSpacing;
		font.lineSpacing = window.defStyle.lineSpacing;
	}

	function changeLine () 
	{
		currentPos.x = 0;
		currentPos.y += font.fontSize + font.lineSpacing;
	}

	var _text;
	property text
	{
		setter(v)
		{
			if (_text != v) {
				_text = v;

			}
		}
		getter
		{
			return _text;
		}
	}
}