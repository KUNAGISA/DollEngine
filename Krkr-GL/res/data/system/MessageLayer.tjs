
class MessageLayer extends KAGLayer
{
	var chLayer = void;//文字层
	var frameLayer = void;//底纹边框

	//坐标相关
	var margin = %[];
	var locate = %[];

	//link相关
	var linkCharLabels = [];
	var linkElm;//当前link的配置

	//UI相关
	var names = %[];
	var uiIndex = 0;
	function MessageLayer(win,par)
	{
		super.KAGLayer(...);
		setSizeToParentSize(1,1);
		enabled = true;
		chLayer = new TextLayer(win,this);
		frameLayer = new GraphicLayer(win,this);
		frameLayer.visible = false;
	}

	function assign (src) 
	{
		super.assign(src);
		invalidate chLayer;
		invalidate frameLayer;
		chLayer = cloneObject(src.chLayer,this);
		frameLayer = cloneObject(src.frameLayer,this);
	}

	function setLocate (x,y) 
	{
		chLayer.currentPos.x = x;
		chLayer.currentPos.y = y;
		locate.x = x;
		locate.y = y;
	}

	function setPosition (elm) 
	{
		if (elm.left !== void) left = elm.left;
		if (elm.top !== void) top = elm.top;
		if (elm.width !== void) width = elm.width;
		if (elm.height !== void) height = elm.height;

		if (elm.frame !== void)
		{
			if(elm.frame != "")
			{
				frameLayer.loadImages(elm.frame);
			}
			else
			{
				frameLayer.freeImages();
			}
		}

		if (elm.marginl !== void) margin.left = elm.marginl;
		if (elm.margint !== void) margin.top = elm.margint;
		if (elm.marginr !== void) margin.right = elm.marginr;
		if (elm.marginb !== void) margin.bottom = elm.marginb;
		refreshMargin();
		if (elm.visible !== void) visible = elm.visible;

	}

	function refreshMargin () 
	{
		if (chLayer)
		{
			chLayer.left = margin.left;
			chLayer.top = margin.top;
			chLayer.width = width - margin.left - margin.right;
			chLayer.height = height - margin.top - margin.bottom;
		}
	}

	function beginLink (elm) 
	{
		linkElm = elm;
	}

	function endLink () 
	{
		addLink(linkElm);
		window.isLinking = false;
	}

	function getControlExp (storage,target,exp,sefile,sebuf) 
	{
		var code="";
		if (storage != void || target != void)
		{
			code += "kag.process(\""+storage+"\",\""+target+"\");";
		}

		if (sefile != void)
		{
			code += "kag.playSE(\""+sefile+"\",\""+sebuf+"\");";
		}

		if (exp != void)
		{
			code += "Scripts.eval(\""+exp+"\")";
		}
		return code;
	}
	//控件构造

	function addLink (elm) 
	{
		if(linkCharLabels.count > 0)
		{
			var object = new LinkButtonLayer(window,this);
			object.initWithLabels(linkCharLabels);
			linkCharLabels.clear();

			if (elm.name === void || elm.name == "")
				elm.name = "link_"+uiIndex;
			object.clickExp = getControlExp(elm.storage,elm.target,elm.exp,elm.clickse,elm.clicksebuf);
			names[elm.name] = object;
			++uiIndex;
		}

	}

	function clearAll () 
	{
		clear();
	}

	function clear () 
	{
		chLayer.clear();
		setLocate(0,0);
		uiIndex = 0;
	}

	//文字相关
	function pushText (text)
	{
		return chLayer.pushText(text);
	}

	function textNoWait () 
	{
		chLayer.noWait();
	}

	function changeLine () 
	{
		chLayer.changeLine();
	}

	//事件
	function onAddCharLabel (charLabel) 
	{
		if(window.isLinking)
		{
			linkCharLabels.add(charLabel);
		}
	}

	property width
	{
		setter(v)
		{
			super.width = v;
			refreshMargin();
		}
		getter
		{
			return super.width;
		}
	}

	property height
	{
		setter(v)
		{
			super.height = v;
			refreshMargin();
		}
		getter
		{
			return super.height;
		}
	}
}