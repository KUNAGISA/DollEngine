
class MessageLayer extends Layer
{
	var messageIndex = void;//在messages里的index
	var frameImage = void;//message层的背景
	var frameColor = void;//message层的颜色
	var chLayer = void;//message层的文字层
	var controlLayer = void;//message层的控件层

	var names = %[]; //用于存放control
	var buttons = %[]; //用于存放syscontrol
	var links = []; //用于存放文字链接

	var locateX = 0;
	var locateY = 0;
	var margin = %[
		l : 0,
		r : 0,
		t : 0,
		b : 0,
	];

	var _commands = [];//用于存档
	var _curLinkButton = void;
	var _curChLineHeight = 0;//当前行的高度

	var uiIndex = 0;

	function MessageLayer (app,par) 
	{
		super.Layer(app,par);
		setAnchor(0,1);
		frameImage = new global.Layer(app,this);
		frameImage.visible = false;
		frameImage.setAnchor(0,1);
		frameImage.absolute = -4;
		frameImage.name = "frameImage";
		frameImage.onPaint = function () {
			global.Layer.onPaint();
		} incontextof frameImage;

		frameColor = new LayerColor(app,this);
		frameColor.visible = false;
		frameColor.setAnchor(0,1);
		frameColor.absolute = -3;
		frameColor.name = "frameColor";

		frameImage.control = true;
		frameImage.onMouseDown = function () {
			app.checkClickSkip();
			app.status.waitClickMode = WAIT_CLICK_NONE;
			return true;
		} incontextof this;
		frameColor.control = true;
		frameColor.onMouseDown = frameImage.onMouseDown;

		chLayer = new WordLayer(app,this);
		chLayer.visible = true;
		chLayer.absolute = -2;

		controlLayer = new global.Layer(app,this);
		controlLayer.setAnchor(0,1);
		controlLayer.visible = true;
		controlLayer.absolute = -1;

		setPosition(%[
				left:0,
				top:0,
				width:par.width,
				height:par.height,
				color:void,
				opacity:255
			]);
	}

	function finalize () 
	{
		invalidate _sw1;
		invalidate _sw2;
		super.finalize();
	}

	function saveCommand (name, elm) {
		if (name == "addText") {
			if (_commands.count > 0 && _commands[-1][0] == "addText") {
				_commands[-1][1] += elm;
				return;
			};
		};
		_commands.add([name,elm]);
	}

	function clearWord () 
	{
		_curChLineHeight = 0;
		chLayer.clearWord();
	}

	function clearEr (sys=false) 
	{
		clearWord();
		resetFont();
		var syses = [];
		for (var i = controlLayer.children.count-1; i >= 0; --i) {
			var control = controlLayer.children[i];
			if(!sys && control.issys)
			{
				continue;
			}
			else {
				invalidate control;
			}
		};
		_curLinkButton = void;
		names = %[];
		links.clear();
		uiIndex = 0;

		var tmp = [];
		for (var i = 0; i < _commands.count; i++) {
			var command = _commands[i];
			if(command[0] != "addText" && (!sys && command[1].issys) ){
				tmp.add(command);
			}
		};
		_commands.clear();
		_commands = tmp;
		setLocate(%[x:0,y:0]);
	}

	function clearLayer () {
		clearEr(true);
		frameImage.freeImage();
		frameImage.visible = false;
		frameColor.visible = false;
		_commands.clear();
	}

	function setPosition (elm) 
	{
		x = elm.left if elm.left !== void;
		y = parent.height-elm.top if elm.top !== void;
		width = elm.width if elm.width !== void;
		height = elm.height if elm.height !== void;
		visible = elm.visible if elm.visible!==void;
		margin.l = elm.marginl if elm.marginl!==void;
		margin.r = elm.marginr if elm.marginr!==void;
		margin.t = elm.margint if elm.margint!==void;
		margin.b = elm.marginb if elm.marginb!==void;

		var tx = margin.l;
		var ty = height - margin.t;
		var tw = width - margin.l - margin.r;
		var th = height - margin.b - margin.t;
		if (elm.frame !== void ) {
			if (elm.frame != "") {
				frameColor.visible = false;
				frameImage.loadImages(elm.frame);
				frameImage.y = height;
				frameImage.visible = true;
			}
			else {
				frameImage.visible = false;
			}
		}
		if (elm.color !== void) {
			if (elm.opacity === void || elm.opacity > 0) {
				frameColor.color = elm.color;
				frameColor.setPos(tx,ty,tw,th);
				frameColor.visible = true;
				frameColor.opacity = elm.opacity===void?255:elm.opacity;
			}
			else {
				frameColor.visible = false;
			}
		}
		chLayer.setPos(tx,ty,tw,th);
		chLayer.refreshWord();
		controlLayer.setPos(tx,ty,tw,th);
	}

	function setLocate (elm) {
		locateX = +elm.x if elm.x !== void;
		locateY = +elm.y if elm.y !== void;
		saveCommand("setLocate",elm);
	}

	function changeLine (elm) 
	{
		saveCommand("changeLine",%[]);
		if (locateChangeLine()) {
			if (!app.status.clickToNext) {
				app.status.waitClickMode = WAIT_CLICK_P;
				app.status.isClickSkip = false;
				return -1;
			}
			else {
				clearWord();
			}
		}
	}

	function setFont (elm) {
		font.size = elm.size;
		font.color = elm.color;
		saveCommand("setFont",elm);
	}

	function resetFont () {
		setFont(app.deffont);
	}

	function locateChangeLine () 
	{
		var data = chLayer.changeLine(locateX,locateY,font);
		locateX = data.x;
		locateY = data.y;
		return data.changePage;
	}

	function onMouseDown (x,y) {
		app.checkClickSkip(x,y);
		return false;
	}

	function onSave () {
		var dict = %[
			position : %[],
		];
		with(dict.position){
			.left = (int)x;
			.top = (int)(parent.height-y);
			.width = (int)width;
			.height = (int)height;
			.marginl = (int)margin.l if (int)margin.l != 0;
			.marginr = (int)margin.r if (int)margin.r != 0;
			.margint = (int)margin.t if (int)margin.t != 0;
			.marginb = (int)margin.b if (int)margin.b != 0;
			.visible = visible if visible==false;
			if (frameImage.visible) {
				.frame = frameImage._imagePath;
				.opacity = (int)frameImage.opacity;
			}
			else if(frameColor.visible) {
				.frame = "";
				.opacity = (int)frameColor.opacity;
				.color = (int)frameColor.color;
			}
			else {
				.frame = "";
			}
		}
		dict.locateX = locateX;
		dict.locateY = locateY;
		dict.commands = [];
		dict.commands.assignStruct(_commands);

		return dict;
	}

	function onLoad (dict) {
		setPosition(dict.position);
		clearEr();
		for (var i = 0; i < dict.commands.length; i++) {
			var command = dict.commands[i];
			dm(command[0]);
			if (command[0] == "addText") {
				var str = command[1];
				for (var k = 0; k < str.length; k++) {
					addText(str[k]);
				}
				continue;
			};
			this[command[0]](command[1]);
		}
		locateX = dict.locateX;
		locateY = dict.locateY;
	}

	/********控件创建********/
	function addButton (elm) 
	{
		if (elm.name == void) {
			elm.name = "_num_"+uiIndex;
		}
		var node = new Button(app,controlLayer);
		node.name = elm.name;
		node.issys = elm.issys===void?false:elm.issys;
		if (node.issys) {
			buttons[elm.name] = node;
		}
		else {
			names[elm.name] = node;
		}
		if (elm.graphic) {
			node.loadGraphic(elm.graphic);
		}
		else {
			node.loadButtons(elm.normal,elm.on);
		}
		if (elm.title) {
			node.title = elm.title;
			node.titleColor = elm.color if elm.color!==void;
		}
		node.setAnchor(0,1);
		node.x = +elm.x;
		node.y = node.parent.height-elm.y;
		node.enabled = elm.enabled if elm.enabled!==void;

		if (elm.animcount != void) {
			if (elm.animtime == void) {
				elm.animtime = 200;
			}
			node.setAnimation(elm.animcount, +elm.animtime);
		};

		node.clickData.exp = elm.exp if elm.exp!==void;
		node.clickData.se = elm.se if elm.se!==void;
		node.clickData.sebuf = elm.sebuf if elm.sebuf!==void;
		node.clickData.callback = elm.callback if elm.callback!==void;
		node.clickData.storage = elm.storage if elm.storage!==void;
		node.clickData.target = elm.target if elm.target!==void;

		++uiIndex;
		saveCommand("addButton",elm);
	}

	function addSlider (elm) 
	{
		if (elm.name == void) {
			elm.name = "_num_"+uiIndex;
		}
		var node = new Slider(app,controlLayer);
		node.name = elm.name;
		node.issys = elm.issys===void?false:elm.issys;
		if (node.issys) {
			buttons[elm.name] = node;
		}
		else {
			names[elm.name] = node;
		}
		node.setAnchor(0,1);
		node.x = +elm.x;
		node.y = node.parent.height-elm.y-12+6;
		node.enabled = elm.enabled if elm.enabled!==void;
		node.vertical = elm.vertical if elm.vertical!==void;
		if (elm.base) {
			node.loadBase(elm.base);
		}
		if (elm.graphic) {
			node.loadTabs(elm.graphic);
		}
		else {
			node.loadTabs(elm.normal,elm.on);
		}
		node.onChangeFunc = Scripts.eval(elm.onchangefunc) if elm.onchangefunc!==void;
		node.step = +elm.step if elm.step!==void;
		node.min = +elm.min if elm.min!==void;
		node.max = +elm.max if elm.max!==void;
		node.position = elm.position===void?100:+elm.position;
		++uiIndex;
		saveCommand("addSlider",elm);
	}

	function addText (text) 
	{
		saveCommand("addText",text);
		var tx = locateX;
		var ty = locateY;
		var data = chLayer.addText(text,locateX,locateY,font);
		locateX = data.x;
		locateY = data.y;
		return data.changePage;
	}

	function addLink (elm) {

		if (elm.name == void) {
			elm.name = "_num_"+uiIndex;
		}
		var node = new LinkButton(app,controlLayer);
		node.name = elm.name;
		node.issys = elm.issys===void?false:elm.issys;
		if (node.issys) {
			buttons[elm.name] = node;
		}
		else {
			names[elm.name] = node;
		}
		node.x=0;
		node.y=0;
		node.setAnchor(0,0);

		_curLinkButton = node;
		++uiIndex;

		saveCommand("addLink",elm);
	}

	function endLink (elm) {
		if (!_curLinkButton) {
			dm("无效的link");
			return;
		};
		_curLinkButton.end();
		_curLinkButton = void;
		saveCommand("endLink",elm);
	}
}
