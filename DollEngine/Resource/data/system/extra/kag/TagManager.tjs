
class TagManager extends KAGController
{
	var macroParams = [];
	var handlers;
	var app;
	var _waitTimer;
	var _waitClickStack = [];
	var onWaitEnd;
	function TagManager (app) 
	{
		super.KAGController();
		this.app = app;
		handlers = app.tagHandlers;
	}

	function finalize () {
		if (_waitTimer) {invalidate _waitTimer;}
		super.finalize();
	}

	function jumpStorage (storage="",label="") 
	{
		if(stepInLabel(storage,label,false)) {
			asyncTrigger(execTags);
			return true;
		}
		else {
			printf("跳转%s:%s失败",storage,label);
			return false;
		}
	}

	function callStorage (storage="",label="") 
	{
		if(stepInLabel(storage,label,true)) {
			_waitClickStack.add(app.status.waitClickMode);
			asyncTrigger(execTags);
			return true;
		}
		else {
			printf("呼叫%s:%s失败",storage,label);
			return false;
		}
	}

	function execTags () 
	{
		// var isjump = false;
			while(true){
				try {
					var time = doTag();
					app.history.updateReadLine();
					if (time < 0) {
						// dm("停止，或等待点击，或跳转");
						return;
					}
					// else if(time == -1) {
					// 	//即将跳转
					// 	isjump = true;
					// 	break;
					// }
					else if(time > 0){
						waitTime(time);
						return;
					}
					stepNext();
				}
				catch(e){
					return;
				}
			}
		// if (isjump) {
		// 	asyncTrigger(execTags);
		// }
	}

	function skipReturnWaitClick () {
		if (_waitClickStack.count > 0) {
			_waitClickStack[-1] = WAIT_CLICK_NONE;
		};
	}

	function onExecute (name,params) 
	{
		if (app.status.isClickSkip && name != 'ch' && name != 'locate' && name != 'r') {
			app.status.isClickSkip = false;
		}
		if (name == "return") {
			if (params.storage != void || params.target != void) {
				dm("return 带storage或target是一个未完成的功能");
				return -1;
				// clearStep();
				// jumpStorage(params.storage,params.target);
			}
			else {
				if(stepOutLabel()){
					if (_waitClickStack[-1] == WAIT_CLICK_NONE) {
						doNext();
					}
					app.status.waitClickMode = _waitClickStack[-1];
					_waitClickStack.erase(_waitClickStack.count-1);
				}
				else {
					em("不对应的return或endmacro");
				}
				return -1;
			}
		}
		if (name == "endmacro") {
			macroParams.erase(macroParams.count-1);
			if(stepOutLabel()){
				if (_waitClickStack[-1] == WAIT_CLICK_NONE) {
					doNext();
				}
				app.status.waitClickMode = _waitClickStack[-1];
				_waitClickStack.erase(_waitClickStack.count-1);
			}
			else {
				em("不对应的return或endmacro");
			}
			return -1;
		}
		app.status.waitClickMode = WAIT_CLICK_NONE;
		if(typeof handlers[name] != "undefined")
		{
			var time = handlers[name](params);
			app.status.clickToNext = false;
			if(time == void || time == 0) {
				return 0;
			}
			else {
				return time;
			}
		}
		else
		{
			if(stepInLabel("MACRO",name,true))
			{
				_waitClickStack.add(app.status.waitClickMode);
				macroParams.add(params);
				asyncTrigger(execTags);
				return -1; //即将jump
			}
			else
			{
				dm("未找到指令"+name);
				return 0;
			}
		}
	}

	function doNext () 
	{
		_waitTimer.enabled = false;
		if (onWaitEnd) {
			onWaitEnd();
			onWaitEnd = void;
		};
		stepNext();
		asyncTrigger(execTags);
	}

	function waitTime (time) 
	{
		if (!_waitTimer) {
			_waitTimer = new Timer(doNext);
		};
		_waitTimer.interval = time;
		_waitTimer.enabled = true;
	}

	function skipWaitTime () {
		if (_waitTimer.enabled) {
			doNext();
		}
	}

	function getMacroParams () 
	{
		if (macroParams.count == 0) {
			em("macro参数为空，一定是哪里有问题了");
		}
		return macroParams[-1];
	}

}

property mp{
	getter {
		return kag.tagManager.getMacroParams();
	}
}

