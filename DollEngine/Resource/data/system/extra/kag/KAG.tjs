
var SKIP_NONE = 0;
var SKIP_CLICK = 1;
var SKIP_PAGE  = 2;
var SKIP_STOP  = 3;
var SKIP_FAST  = 4;
var SKIP_LABEL = 5;
var SKIP_CANCEL = 6;
var SKIP_FORCE  = 7;


class KAG extends Application
{
	//图层控制
	var fore = %[];//表层
	var back = [];//里层配置
	var currentLayer = "message0";
	var current;

	//存档控制
	var history;

	//剧本控制
	var tagManager;
	var moveWaits = [];//当前移动指令的timeline
	var actionWaits = [];//当前action指令的timeline

	//状态数据
	var allskip = 1;// 0 已读跳过 1 skip时全部跳过
	var autoMode = false;//是否自动前进
	var skipMode = SKIP_NONE;//是否skip
	var fullScreen = false;
	var bookMarkDates = [];//存档日期
	var bookMarkNames = [];//存档标题

	var tempSaveData;//l或p所临时存储的界面
	
	function KAG () 
	{
		super.Application();

		fore.base = new BaseLayer(this,sysbase);
		fore.base.name = "base";

		fore.layers = [];
		fore.messages = [];

		tagManager = new TagManager(this);

		history = new History(this);
		history.readed = sf.readHistory;

	}

	function initStatus () {
		super.initStatus();

		if (sf.readHistory == void) {
			sf.readHistory = %[];
		}

		status.transReady = false; //是否进行过trans准备（backlay）

		status.uiPage = 'fore', //UI控件将被创建在back层还是fore层

		status.delay = 200;//文字显示速度
		status.nowait = false; //是否瞬间显示文本/按钮
		status.clickskip = false; //是否允许点击略过
		status.lockLink = false; //禁止Message层的按钮被点击
		/*
		0 不等待
		1 等待文字
		2 等待移动
		3 等待trans 
		4 等待时间
		5 等待点击继续文字
		6 等待点击换页
		*/
		status.waitClickMode = WAIT_CLICK_NONE;
		status.isClickSkip = false;//是否点击之后skip动画中
		status.clickToNext = false;//是否刚刚点击继续过（用于过滤r）
		status.locksnapshot = false;//是否存档画面锁定
		status.isClickShowMessages = false;//是否点击以后显示messages

		initBookMarkDates();
		dm("【Application status initialized】");
	}

	function add (object) {
		// body...
	}

	property historyWriteEnabled{
	    setter(v) {
	    	//setter
	    	history.enabled=v;
		}
		getter {
	    	//getter
			return history.enabled;
		}
	}

	/*图层管理*/

	function getCurrentLayer () 
	{
		if (this.status.uiPage == 'back') {
			return void;
		}
		return current;
	}

	function getLayerByElm (elm) 
	{
		var p=elm.page,layer=elm.layer;
		if (p == 'back') {
			return void;
		}
		else {
			var lay;
			var zorder;
			var msgIdx = -1;
			var layIdx = -1;
			if (typeof layer != 'String') {
				layer = string(layer);
			}
			if (layer.indexOf('message') == 0) {
				msgIdx = int(+layer.substr(7));
				if(msgIdx < 0){
					msgIdx = 0;
				}
			}
			else {
				layIdx = int(+layer);
				if(layIdx < 0) {
					layIdx = 0;
				}
			}
			if(msgIdx >= 0) {
				lay = fore.messages[msgIdx];
				if(!lay){
					lay = new MessageLayer(this,fore.base);
					// with(DEConfig.game.message) {
					// 	lay.setPosition(%[
					// 			width : .width,
					// 			height : .height,
					// 			marginl : .marginLRTB[0],
					// 			marginr : .marginLRTB[1],
					// 			margint : .marginLRTB[2],
					// 			marginb : .marginLRTB[3],
					// 		]);
					// }
					lay.name = "message"+msgIdx;
					lay.absolute=1000000+1000*msgIdx;
					fore.messages[msgIdx] = lay;
				}
				return lay;
			}
			else if(layer == "base"){
				return fore.base;
			}
			else {
				lay = fore.layers[layIdx];
				if(!lay){
					lay = new GraphicLayer(this,fore.base);
					lay.name = "layer"+msgIdx;
					lay.absolute=1000*layIdx;
					fore.layers[layIdx] = lay;
				}
				return lay;
			}
		}
	}

	function hideMessages (v = false, isclickshow=false) {
		for (var i = 0; i < fore.messages.count; i++) {
			if (fore.messages[i]) {
				fore.messages[i].visible = v;
			};
		};
		if (!v) {
			status.isClickShowMessages = isclickshow;
		}
	}

	function clearLayers () 
	{
		for (var i = 0; i < fore.layers.count; i++) {
			if (fore.layers[i]) {
				fore.layers[i].freeImage();
			}
		};
		for (var i = 0; i < fore.messages.count; i++) {
			if (fore.messages[i]) {
				fore.messages[i].clearLayer();
			};
		};
		fore.base.freeImage();
		status.lockLink = false;
	}

	/*效果控制*/

	function transWithMethod (method,time) {
		switch(method) {
			case "crossfade" :
			{
				sceneTransition("CrossFade",time);
			}
		}
		if (status.transReady == false) {
			clearLayers();
		}
		var count = back.count;
		for (var i = 0; i < count; i++) {
			tagManager.onExecute(back[i][0],back[i][1]);
		};
		back.clear();
		status.transReady = false;
	}

	function onSceneTransFinished () {
		super.onSceneTransFinished();
		tagManager.doNext();
	}

	/*TAG控制*/

	function enterAutoMode () {
		autoMode = true;
	}

	function cancelAutoMode () {
		autoMode = false;
	}

	function skipToStop () {
		skipMode = SKIP_STOP;
	}

	function cancelSkip () {
		skipMode = SKIP_NONE;
	}

	function checkSkip () {
		if (skipMode!=SKIP_NONE) {
			this.status.waitClickMode = WAIT_CLICK_NONE;
			if (allskip == 0) {
				if(history.checkReaded()) {
					return true;
				}
				else {
					return false;
				}
			}
			else  {
				return true;
			}
		}
		return false;
	}

	function checkAuto () {
		return autoMode;
	}

	function checkClickSkip () {
		switch(this.status.waitClickMode) {
			case WAIT_CLICK_NONE:
			{
				tagManager.skipWaitTime();
			}
			break;
			case WAIT_CLICK_WORD:
			{
				//等待文字
				this.status.isClickSkip = true;
			}
			break;
			case WAIT_CLICK_MOVE:
			{
				//等待move
				for (var i = this.moveWaits.count - 1; i >= 0; i--) {
					var act = this.moveWaits[i];
					if (isvalid act) {
						act.stop();
					}
				}
				this.moveWaits.clear();
				this.tagManager.doNext();
			}
			break;
			case WAIT_CLICK_TRANS:
			{
				//等待trans
				skipTransition();
			}
			break;
			case WAIT_CLICK_TIME:
			{
				//等待时间
				clickToNext();
			}
			break;
			case WAIT_CLICK_L:
			{
				//等待点击继续文字
				clickToNextCh();
			}
			break;
			case WAIT_CLICK_P:
			{
				//等待点击换页
				clickToNextPage();
			}
			break;
			case WAIT_CLICK_ACTION:
			{
				//等待动作结束
				for (var i = this.actionWaits.count - 1; i >= 0; i--) {
					var act = this.actionWaits[i];
					if (isvalid act) {
						act.stop();
					}
				}
				this.actionWaits.clear();
				this.tagManager.doNext();
			}
			break;
		}
	}

	function clickToClear () {
		var lay = getCurrentLayer();
		if (!lay) {
			dm("指令p在点击时，当前图层应该是表层");
			return;
		}
		lay.clearWord();
		lay.setLocate(%[x:0,y:0]);
	}

	function clickToNext () 
	{
		this.status.clickToNext = true;
		this.tagManager.doNext();
	}

	function clickToNextCh () 
	{
		var lay = getCurrentLayer();
		if (!lay) {
			dm("指令l在点击时，当前图层应该是表层");
			return;
		}
		clickToNext();
	}

	function clickToNextPage () 
	{
		clickToClear();
		clickToNext();
	}


	function checkElm (elm,arr) 
	{
		for (var i = 0; i < arr.count; i++) {
			if(typeof elm[arr[i]] == 'undefined'){
				em("必须的参数 %s 不存在",arr[i]);
			}
		};
	}

	function mergerBack (tag, elm) 
	{
		var telm = %[];
		(Dictionary.assignStruct incontextof telm)(elm);
		telm.page = 'fore';
		telm.cond = void;
		this.back.add([tag,telm]);
	}

	function process (storage, target) {
		tagManager.jumpStorage(storage,target);
	}

	function callExtraConductor (storage, target) {
		this.tagManager.callStorage(storage,target);
	}

	/*******存档读档部分*******/

	function initBookMarkDates () {
		bookMarkDates.clear();
		bookMarkNames.clear();
		if (!_cacheData.bookMarkDatas) {
			_cacheData.bookMarkDatas = [];
		}
		else {
			for (var i = 0; i < _cacheData.bookMarkDatas.count; i++) {
				var data = _cacheData.bookMarkDatas[i];
				if(data) {
					bookMarkDates[i] = data.date;
					bookMarkNames[i] = data.name;
				}
			}
		}
	}

	function getBookMarkFileNameAtNum (index) {
		var path = DEConfig.game.saveDataPath.sprintf(index);
		return path;
	}

	function locksnapshot () {
		var data = tempSaveData;
		if (!data) {
			saveTempData();
			data = tempSaveData;
		};
		status.locksnapshot = true;
		if(DEConfig.game.saveThumbWidth > 0) {
			var thumbRtt = new RTT();
			thumbRtt.init(sysbase.width,sysbase.height);
			thumbRtt.begin(0,0,0,1);
			sysbase.visit();
			thumbRtt.end();
			data.thumbRtt = thumbRtt;
		}
		return data;
	}

	function unlocksnapshot () {
		if(tempSaveData && tempSaveData.thumbRtt) {
			invalidate tempSaveData.thumbRtt;
			tempSaveData.thumbRtt = void;
			delete tempSaveData.thumbRtt;
		}
		status.locksnapshot = false;
	}

	function saveTempData () {
		if (status.locksnapshot) {
			return;
		}
		var data = %[];
		data.f = f;
		var base = fore.base.onSave();
		var layers = [];
		var messages = [];
		for (var i = 0; i < fore.layers.count; i++) {
			var lay = fore.layers[i];
			if(lay){
				layers.add(lay.onSave());
			}
			else {
				layers.add(0);
			}
		};
		for (var i = 0; i < fore.messages.count; i++) {
			var lay = fore.messages[i];
			if(lay){
				messages.add(lay.onSave());
			}
			else {
				messages.add(0);
			}
		}
		data.base = base;
		data.layers = layers;
		data.messages = messages;
		data.current = currentLayer;
		data.macroParams = [];
		data.macroParams.assignStruct(tagManager.macroParams);
		data.waitClickMode = status.waitClickMode;
		data.tags = tagManager.saveStack();
		data.bookmark = %[
			name : tagManager.lastTarget
		];
		tempSaveData = data;
	}

	function setBookMarkData (index,data) {
		_cacheData.bookMarkDatas[index] = data;
		bookMarkDates[index] = data.date;
		bookMarkNames[index] = data.name;
	}

	function saveData (index, isask=false) {
		if (!tempSaveData) {
			saveTempData();
		}

		var tdata = %[];
		(Dictionary.assignStruct incontextof tdata)(tempSaveData);

		var name = getBookMarkFileNameAtNum(index);
		tdata.bookmark.storage = name;
		var date = new Date();
		tdata.bookmark.date = "%d/%d/%d %d:%d:%d".sprintf(date.getYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds());
		if (tdata.thumbRtt) {
			var thumbWidth = DEConfig.game.saveThumbWidth;
			var thumbHeight = int(thumbWidth * sysbase.height / sysbase.width);
			tdata.thumbRtt.saveToFile(name+".png",thumbWidth,thumbHeight);
			invalidate tdata.thumbRtt;
			tdata.thumbRtt = void;
			delete tdata.thumbRtt;
		};
		(Dictionary.saveStruct incontextof tdata)(name+".save");
		setBookMarkData(index,tdata.bookmark);
	}

	function loadData (index, isask=false) {
		tempSaveData = void;
		var name = getBookMarkFileNameAtNum(index);
		var data = Scripts.evalStorage(name+".save");
		if(!data){
			dm("存档不存在，编号:",index);
			return;
		}
		f = data.f;
		clearLayers();
		currentLayer = data.current;
		this.status.uiPage = "fore";
		fore.base.onLoad(data.base);
		for (var i = 0; i < data.layers.length; i++) {
			if (data.layers[i] == 0) {continue;}
			var lay = getLayerByElm(%[layer:i, page:"fore"]);
			lay.onLoad(data.layers[i]);
		}
		for (var i = 0; i < data.messages.length; i++) {
			if (data.messages[i] == 0) {continue;}
			var lay = getLayerByElm(%[layer:"message"+i, page:"fore"]);
			lay.onLoad(data.messages[i]);
		}
		currentLayer = data.current;
		status.waitClickMode = data.waitClickMode;

		tagManager.loadStack(data.tags);

		tagManager.macroParams = data.macroParams;
		if(tagManager.stepOutLabel()){
			if (status.waitClickMode == WAIT_CLICK_NONE) {
				asyncTrigger(tagManager.doNext);
			}
		}
	}


	/*******TAG部分*******/
	var tagHandlers = %[

		/*******无效的指令*******/
		loadplugin : function () {print('失效的指令loadplugin');} incontextof this,
		mappfont : function () {print('失效的指令mappfont');} incontextof this,
		rclick : function () {print('失效的指令rclick');} incontextof this,

		/*******系统操作*******/

		//执行表达式
		eval : function (elm) 
		{
			if (elm.exp) {
				Scripts.eval(elm.exp);
			}
		} incontextof this,

		iscript : function (elm) 
		{
			Scripts.exec(elm.exp);
		} incontextof this,

		endscript : function (elm) 
		{
		} incontextof this,


		/*******剧本控制*******/
		call : function (elm) 
		{
			callExtraConductor(elm.storage,elm.target);
			return -1;
		} incontextof this,

		jump : function (elm) 
		{
			process(elm.storage,elm.target);
			return -1;
		} incontextof this,

		wait : function (elm) 
		{
			checkElm(elm,['time']);
			this.status.waitClickMode = WAIT_CLICK_TIME;
			return elm.time;
		} incontextof this,

		waitclick : function (elm) 
		{
			this.status.waitClickMode = WAIT_CLICK_TIME;
			return -1;
		} incontextof this,

		wt : function (elm) 
		{
		} incontextof this,

		deffont : function (elm) 
		{
			merger(this.deffont,elm);
		} incontextof this,

		history : function (elm) 
		{
			historyWriteEnabled = elm.output if elm.output !== void;
		} incontextof this,

		s : function (elm) 
		{
			this.status.waitClickMode = WAIT_CLICK_NONE;
			return -1;
		} incontextof this,

		clickskip : function (elm) 
		{
			this.status.clickskip = elm.enabled if elm.enabled!==void;
		} incontextof this,

		locklink : function (elm) 
		{
			this.status.lockLink = true;
		} incontextof this,

		unlocklink : function (elm) 
		{
			this.status.lockLink = false;
		} incontextof this,

		l : function (elm) 
		{
			var lay = getCurrentLayer();
			if (!lay) {
				this.mergerBack('l',elm);
				return;
			}
			this.status.waitClickMode = WAIT_CLICK_L;
			saveTempData();
			if (checkSkip()) {
				this.status.waitClickMode = WAIT_CLICK_NONE;
				return 0;
			}
			if (checkAuto()) {
				this.status.waitClickMode = WAIT_CLICK_NONE;
				return 0;
			}
			return -1;
		} incontextof this,

		p : function (elm) 
		{
			var lay = getCurrentLayer();
			if (!lay) {
				this.mergerBack('p',elm);
				return;
			}
			this.status.waitClickMode = WAIT_CLICK_P;
			saveTempData();
			if (checkSkip()) {
				this.status.waitClickMode = WAIT_CLICK_NONE;
				tagManager.onWaitEnd = clickToClear;
				return 200;
			}
			if (checkAuto()) {
				this.status.waitClickMode = WAIT_CLICK_NONE;
				tagManager.onWaitEnd = clickToClear;
				return 200;
			}
			return -1;
		} incontextof this,

		/*******音频控制*******/
		bgmopt : function (elm)
		{
			this.getBGM().volume = elm.volume if elm.volume !== void;
		} incontextof this,

		seopt : function (elm)
		{
			var se = this.getSE(elm.buf);
			se.volume = elm.volume if elm.volume!==void;
			se.pan = elm.pan if elm.pan!==void;
		} incontextof this,

		xchgbgm : function (elm) {
			tagHandlers.fadeinbgm(elm);
		} incontextof this,

		pausebgm : function (elm) {
			var bgm = this.getBGM();
			bgm.pause();
		} incontextof this,

		resumebgm : function (elm) {
			var bgm = getBGM();
			bgm.resume();
		} incontextof this,

		fadeinbgm : function (elm) 
		{
			checkElm(elm,['storage']);
			elm.loop = true if elm.loop===void;
			elm.time = 1000 if elm.time===void;
			var bgm = this.getBGM();
			bgm.preload(elm.storage);
			bgm.fadeTime = elm.time;
			bgm.play(elm.loop,true);
		} incontextof this,

		fadeoutbgm : function (elm) 
		{
			checkElm(elm,['time']);
			this.getBGM().fadeTime = elm.time;
			this.getBGM().stop(true);
		} incontextof this,

		playse : function (elm) 
		{
			checkElm(elm,['storage']);
			playSe(elm.storage,elm.buf,elm.loop);
		} incontextof this,

		/*******存档读档*******/

		save : function (elm) {
			saveData(elm.place,elm.ask);
		} incontextof this,

		load : function (elm) {
			loadData(elm.place,elm.ask);
			return -1;
		} incontextof this,

		locksnapshot : function (elm) {
			locksnapshot();
		} incontextof this,

		unlocksnapshot : function (elm) {
			unlocksnapshot();
		} incontextof this,

		/*******界面控制*******/
		laycount : function (elm) {
			if (elm.layer !== void) {
				for (var i = 0; i < elm.layer; i++) {
					this.getLayerByElm(%[layer:i,page:"fore"]);
				}
			}
			if (elm.messages !== void) {
				for (var i = 0; i < elm.messages; i++) {
					this.getLayerByElm(%[layer:"message"+i,page:"fore"]);
				}
			};
		} incontextof this,

		//创建界面@ui storage=xx layer=xx page=xx visible=xx data=xx
		ui : function (elm) 
		{
			checkElm(elm,['layer','storage']);
			if (elm.page == 'back') {
				this.mergerBack('ui',elm);
				return;
			}
			if (typeof this.world.names[elm.layer] != 'undefined') {
				em('重复的UI %s',elm.layer);
				return -1;
			}
			var uipath = Storages.getFullPath(elm.storage);
			if (!uipath) {
				print("[loadui]ui配置文件%s未找到",uipath);
				return;
			}
			if (typeof elm.hd == 'undefined') {
				elm.hd = true;
			}
			var lay = UIReader.readJsonFile(uipath,this.world,elm.hd);
			this.world.names[elm.layer] = lay;
			lay.visible = elm.visible if elm.visible !== void;
			if (typeof lay.initialize != 'undefined') {
				if (elm.data) {
					var data = Scripts.eval(elm.data);
					lay.initialize(data);
				}
				else {
					lay.initialize();
				}
				lay.refresh();
				if (elm.anim) {
					lay.playShow();
				}
			}
			print("UI %s 创建成功",elm.storage);
		} incontextof this,

		image : function (elm) 
		{
			this.checkElm(elm,['layer','storage']);
			var lay = this.getLayerByElm(elm);
			if(!lay) {
				this.mergerBack('image',elm);
				return;
			}
			if(!lay.loadImages(elm.storage)) {
				dm("[image]加载资源"+elm.storage+"失败");
			}
			var x = elm.left;
			var y = +lay.parent.height - elm.top;
			lay.setPos(x,y);
			lay.scale = 1;
			lay.opacity = elm.opacity if elm.opacity!==void;
			lay.visible = elm.visible if elm.visible!==void;
			lay.absolute = elm.index if elm.index!==void;
		} incontextof this,

		freeimage : function (elm) 
		{
			this.checkElm(elm,['layer']);
			var lay = this.getLayerByElm(elm);
			if(!lay) {
				this.mergerBack('freeimage',elm);
				return;
			}
			lay.freeImage();
		} incontextof this,

		clearlayers : function (elm) 
		{
			if (elm.page == 'back') {
				this.mergerBack('clearlayers',elm);
				this.status.transReady = false;
				return;
			}
			this.clearLayers();
		} incontextof this,

		layopt : function (elm) 
		{
			this.checkElm(elm,['layer']);
			var lay = this.getLayerByElm(elm);
			if(!lay) {
				this.mergerBack('layopt',elm);
				return;
			}
			lay.scale = elm.zoom/100 if elm.zoom!==void;
			lay.visible = elm.visible if elm.visible!==void;
			lay.x = elm.left if elm.left!==void;
			lay.y = lay.parent.height - elm.top if elm.top!==void;
			lay.opacity = elm.opacity if elm.opacity!==void;
			lay.absolute = elm.index if elm.index!==void;
		} incontextof this,

		position : function (elm) 
		{
			this.checkElm(elm,['layer']);
			var lay = this.getLayerByElm(elm);
			if(!lay) {
				this.mergerBack('position',elm);
				return;
			}
			if (lay instanceof "MessageLayer") {
				lay.setPosition(elm);
			}
			else {
				em("position指令只能操作MessageLayer类对象");
				return -1;
			}
		} incontextof this,

		current : function (elm) 
		{
			this.checkElm(elm,['layer']);
			if (elm.page == 'back') {
				this.status.uiPage = 'back';
				this.mergerBack('current',elm);
				return;
			}
			else {
				this.status.uiPage = 'fore';
			}
			this.currentLayer = elm.layer;
			current = getLayerByElm(elm);
		} incontextof this,

		er : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if (!lay) {
				this.mergerBack('er',elm);
				return;
			}
			lay.clearEr();
		} incontextof this,

		r : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if (!lay) {
				this.mergerBack('r',elm);
				return;
			}
			var ret = lay.changeLine();
			if (ret == -1) {
				return tagHandlers.p(%[]);
			}
			if (this.status.nowait) {
				return 0;
			}
			if (checkSkip()) {
				return 30;
			}
			return this.status.delay;
		} incontextof this,

		csysbutton : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if (!lay) {
				this.mergerBack('csysbutton',elm);
				return;
			}
			lay.clearEr(true);
		} incontextof this,

		delay : function (elm) 
		{
			this.checkElm(elm,['speed']);
			this.status.delay = elm.speed;
		} incontextof this,

		nowait : function (elm) 
		{
			this.status.nowait = true;
		} incontextof this,

		endnowait : function (elm) 
		{
			this.status.nowait = false;
		} incontextof this,

		locate : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('locate',elm);
				return;
			}
			lay.setLocate(elm);
		} incontextof this,

		link : function (elm) {
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('link',elm);
				return;
			}
			lay.addLink(elm);
		} incontextof this,

		endlink : function (elm) {
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('endlink',elm);
				return;
			}
			lay.endLink(elm);
		} incontextof this,

		button : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('button',elm);
				return;
			}
			elm.issys = false;
			lay.addButton(elm);
			if (this.status.nowait) {
				return 0;
			}
			if (checkSkip()) {
				return 0;
			}
			return this.status.delay;
		} incontextof this,

		ch : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('ch',elm);
				return;
			}
			var changePage = lay.addText(elm.text);
			history_push(elm.text);
			if (changePage) {
				this.status.waitClickMode = WAIT_CLICK_P;//点击等待换页
				this.status.isClickSkip = false;
				return tagHandlers.p(%[]);
			}
			if (this.status.nowait || this.status.isClickSkip) {
				return 0;
			}
			if (checkSkip()) {
				return 0;
			}
			this.status.waitClickMode = WAIT_CLICK_WORD;
			return this.status.delay;
		} incontextof this,

		font : function (elm)
		{
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('font',elm);
				return;
			}
			lay.setFont(elm);
		} incontextof this,

		list : function (elm) 
		{
			this.checkElm(elm,['width','height','create']);
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('font',elm);
				return;
			}
			lay.addList(elm);
			if (this.status.nowait) {
				return 0;
			}
			if (checkSkip()) {
				return 0;
			}
			return this.status.delay;
		} incontextof this,

		slider : function (elm) 
		{
			var lay = this.getCurrentLayer();
			if(!lay) {
				this.mergerBack('slider',elm);
				return;
			}
			elm.issys = false;
			lay.addSlider(elm);
			if (this.status.nowait) {
				return 0;
			}
			if (checkSkip()) {
				return 0;
			}
			return this.status.delay;
		} incontextof this,

		/*******效果控制*******/
		backlay : function () 
		{
			this.back.clear();
			this.status.transReady = true;
		} incontextof this,

		trans : function (elm) 
		{
			this.checkElm(elm,['method']);
			elm.time = 1000 if elm.time===void;
			this.transWithMethod(elm.method, elm.time);
			this.status.waitClickMode = WAIT_CLICK_TRANS;
			return -1;
		} incontextof this,

		move : function (elm) 
		{
			this.checkElm(elm,['layer','path']);
			var lay = this.getLayerByElm(elm);
			if(!lay) {
				this.mergerBack('move',elm);
				return;
			}
			var time = 1000;
			if (elm.time!==void) {
				time = elm.time;
			}
			var path = elm.path;
			path = path.substr(1,path.length-2);
			var paths = path.split(")(",,true);

			//瞬间处理
			if (time == 0) {
				var cfg = paths[-1].split(",");
				lay.setPos(cfg[0],lay.parent.height-cfg[1]);
				lay.opacity = cfg[2];
				return;
			}

			//持续一段时间的处理
			var arr1 = [];
			var arr2 = [];
			var timeline = new Timeline(this,lay);
			var startTime = 0;
			for (var i = 0; i < paths.count; i++) {
				var cfg = paths[i].split(",");
				cfg[1] = lay.parent.height - cfg[1];
				var lastcfg;
				if (i == 0) {
					lastcfg = [lay.x,lay.y,lay.opacity];
				}
				else {
					lastcfg = paths[i-1].split(",");
					lastcfg[1] = lay.parent.height - lastcfg[1];
				}
				var dut = time/paths.count;
				// dm('==========',paths[i]);
				// dm(cfg*);
				// dm(lastcfg*);
				timeline.setKeyframe("x",+lastcfg[0],+cfg[0],dut, startTime);
				timeline.setKeyframe("y",+lastcfg[1],+cfg[1],dut, startTime);
				timeline.setKeyframe("opacity",+lastcfg[2],+cfg[2],dut, startTime);

				startTime += dut;
			};
			timeline.onTimelineFinished = function () {
				this[0].moveWaits.remove(this[1]);
			} incontextof [this,timeline];
			moveWaits.add(timeline);
			timeline.start();
		} incontextof this,

		action : function (elm) 
		{
			this.checkElm(elm,['layer','module']);
			var lay = this.getLayerByElm(elm);
			if(!lay) {
				this.mergerBack('action',elm);
				return;
			}
			var time = 1;
			if (elm.time!==void) {
				time = elm.time;
			}
			var act;
			if(_tagActions[elm.module]){
				act = _tagActions[elm.module](lay,time,elm);
			}
			else {
				dm("未实现的tag action",elm.module);
				return;
			}

			act.onTimelineFinished = function () 
			{
				this[0].actionWaits.remove(this[1]);
			} incontextof [this,act];
			this.actionWaits.add(act);
		} incontextof this,

		wact : function (elm) 
		{
			if (this.actionWaits.count == 0) {
				return 0;
			}
			else {
				elm.page = "fore";
				var lay = this.getLayerByElm(elm);
				var timeline=void;
				for (var i = 0; i < actionWaits.count; i++) {
					if(actionWaits[i].object==lay){
						timeline = actionWaits[i];
						break;
					}
				}
				if (!timeline) {
					return 0;
				}
				if (!isvalid timeline) {
					actionWaits.remove(timeline);
					return 0;
				}
				var t = Math.max(0,(timeline.duration - timeline.currentTime));
				this.actionWaits.remove(timeline);
				this.status.waitClickMode = WAIT_CLICK_ACTION;
				return t*1000;
			}
		} incontextof this,

		wm : function (elm) 
		{
			if (this.moveWaits.count == 0) {
				return 0;
			}
			else {
				var timeline = this.moveWaits[0];
				if (!isvalid timeline) {
					this.moveWaits.erase(0);
					return 0;
				}
				var t = Math.max(0,(timeline.duration - timeline.currentTime));
				this.moveWaits.erase(0);
				this.status.waitClickMode = WAIT_CLICK_MOVE;
				return t;
			}
		} incontextof this,
	];


	function onMouseDown (x,y) {
		if (_triggerTouches.count == 0) {
			if (status.isClickShowMessages) {
				status.isClickShowMessages = false;
				hideMessages(true);
				return;
			}
			checkClickSkip();
		}
		if (skipMode != SKIP_NONE) {
			cancelSkip();
		}
		cancelAutoMode();
	}

	function addHook () {
		dm("失效的API:addHook");
	}

	function removeHook () {
		dm("失效的API:removeHook");
	}
}
