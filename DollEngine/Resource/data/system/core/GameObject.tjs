
class GameObject
{
	//public
	var transform = void;
	var children = [];
	var parent;
	var app;
	var enabled = true;
	
	//private
	var _needSortChildren = false;
	var _transInWorld = void;

	function GameObject (app,par) {
		assert(app,"GameObject必须存在app属性");
		this.app = app;
		parent = par;
		if(parent) {
			parent.children.add(this);
		}
		transform = new Transform();
		_transInWorld = new Transform();
	}

	function finalize () {
		invalidate transform;
		invalidate _transInWorld;
		if(parent)
			parent.children.remove(this);
		parent = void;
		removeAllChildren();
	}

	function removeAllChildren () {
		for (var i = 0; i < children.count; i++) {
			invalidate children[i];
		}
		children.clear();
	}

	function updateTransform () {
		transform.flush();
		if(parent) {
			_transInWorld.assign(parent._transInWorld);
		}
		else {
			_transInWorld.init();
		}
		_transInWorld.transform(transform);
		_transInWorld.width = transform.width;
		_transInWorld.height = transform.height;
	}

	function updateTouches () {
		if (enabled) {
			if (_needSortChildren) {
				children.sort(function (a,b) {
					return a.absolute < b.absolute;
				});
				_needSortChildren = false;
			}
			for (var i = 0; i < children.count; i++) {
				children[i].updateTouches();
			};
		}
	}

	function visit () {
		if(visible) {
			if (_needSortChildren) {
				children.sort(function (a,b) {
					return a.absolute < b.absolute;
				});
				_needSortChildren = false;
			}
			updateTransform();
			if(children.count == 0){
				onPaint();
			}
			else {
				var i = 0;
				for (; i < children.count; ++i) {
					if(children[i].absolute < 0) {
						children[i].visit();
					}
					else {
						break;
					}
				}
				onPaint();
				for (; i < children.count; ++i) {
					children[i].visit();
				}
			}
		}
	}


	/***
	*事件
	*/

	function onPaint () {
		
	}

	function onHitTest (x,y) {
		//当鼠标在该对象身上按下的时候检查是否需要触发点击事件
		return true;
	}
	
	/***
	*属性
	*/

	property width {
	    setter(v) {
	    	transform.width = v;
	    }
	    getter {
	    	return transform.width;
	    }
	}

	property height {
	    setter(v) {
	    	transform.height = v;
	    }
	    getter {
	    	return transform.height;
	    }
	}

	property x {
	    setter(v) {
	    	transform.x = v;
	    }
	    getter {
	    	return transform.x;
	    }
	}

	property y {
	    setter(v) {
	    	transform.y = v;
	    }
	    getter {
	    	return transform.y;
	    }
	}

	property anchorX {
	    setter(v) {
	    	transform.anchorX = v;
	    }
	    getter {
	    	return transform.anchorX;
	    }
	}

	property anchorY {
	    setter(v) {
	    	transform.anchorY = v;
	    }
	    getter {
	    	return transform.anchorY;
	    }
	}

	var _visible = true;
	property visible{
		setter(v) {
			_visible = v;
		}
		getter {
			return _visible;
		}
	}

	var _absolute = 0;
	property absolute{
		setter(v) {
			_absolute = v;
			if(parent) parent._needSortChildren;
		}
		getter {
			return _absolute;
		}
	}

	var _parent = null;
	property parent {
		setter(v) {
			if(_parent) {
				_parent.children.remove(this);
				_parent._needSortChildren = true;
			}
			_parent = v;
			if(_parent) {
				_parent.children.add(this);
				_parent._needSortChildren = true;
			}
		}
		getter {
			return _parent;
		}
	}
}
