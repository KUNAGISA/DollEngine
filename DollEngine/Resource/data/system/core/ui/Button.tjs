
class Button extends Control
{
	var clickData = %[
		exp : "", //点击时执行的表达式
		se : '', //点击时的音效
		sebuf : '',//点击时的音效音轨的编号
		storage : void, //跳转的脚本
		target : void, //跳转的脚本的标签
	];
	var _imageBase = void;
	var _normalImage;
	var _selectImage;
	var _disableImage;
	var _title=void;

	var animTimer;
	var animCount;
	var _animIndex=0;
	var _animOrginHeight=0;

	function Button (app,par) 
	{
		super.Control(app,par);
		_imageBase = new global.GameObject(app,this);
		_normalImage = new global.Layer(app,_imageBase);
		_selectImage = new global.Layer(app,_imageBase);
		_disableImage = new global.Layer(app,_imageBase);
		_normalImage.setAnchor(0.5,0.5);
		_selectImage.setAnchor(0.5,0.5);
		_disableImage.setAnchor(0.5,0.5);
		_normalImage.visible=true;
		_selectImage.visible=false;
		_disableImage.visible=false;
	}

	function finalize() {
		if(animTimer) {
			invalidate animTimer;
		}
		super.finalize();
	}

	function loadImages (graphic) {
		return loadGraphic(graphic);
	}

	function loadGraphic (graphic) 
	{
		if(this._normalImage.loadImages(graphic))
		{
			this._selectImage.loadImages(graphic);
			var w = this._normalImage.width/3;
			var h = this._normalImage.height;
			this._normalImage.clipRect(0,0,w,h);
			this._selectImage.clipRect(w,0,w,h);
			this._normalImage.cRect = [0,0,w,h];
			this._selectImage.cRect = [w,0,w,h];
			setSizeToImageSize();
			_animOrginHeight = height;
		}
	}

	function loadButtons (normal,select) 
	{
		this._normalImage.loadImages(normal);
		if (select) {
			this._selectImage.loadImages(select);
		}
		else {
			this._selectImage.loadImages(normal);
			this._selectImage.startColor = 0x888888;
			this._selectImage.endColor = 0x888888;
		}
		setSizeToImageSize();
		this._normalImage.cRect = [0,0,width,height];
		this._selectImage.cRect = [0,0,width,height];
		_animOrginHeight = height;
	}

	function loadDisable (path) {
		this._disableImage.loadImages(path);
	}

	function setAnimation (count, interval) {
		if (count==0) {
			return;
		};
		if (!animTimer) {
			animTimer = new Timer(animationUpdate);
		};
		animTimer.interval = interval;
		animCount = count;
		_animIndex = 0;
		animationUpdate();
		setSizeToImageSize();
		animTimer.enabled = true;
	}

	function animationUpdate () {
		if (_animIndex >= animCount) {
			_animIndex = 0;
		}
		var h = _animOrginHeight / animCount;
		var nrect = this._normalImage.cRect;
		var srect = this._selectImage.cRect;
		this._normalImage.clipRect(nrect[0], nrect[1]+h*_animIndex, nrect[2], h);
		this._selectImage.clipRect(srect[0], srect[1]+h*_animIndex, srect[2], h);
		++_animIndex;
	}

	function setSizeToImageSize () {
		setSize(_normalImage.width,_normalImage.height);
		_imageBase.x = _normalImage.width/2;
		_imageBase.y = _normalImage.height/2;
	}

	function setImageSize (w,h) 
	{
    	setSize(...);
    	_imageBase.x = width/2;
    	_imageBase.y = height/2;
		_normalImage.setImageSize(w,h,true);
		_selectImage.setImageSize(w,h,true);
		_disableImage.setImageSize(w,h,true);
	}

	function onMouseDown (x,y) 
	{
		var ret = super.onMouseDown(x,y);
		if(!ret) {
			return false;
		}
		this._selectImage.visible=true;
		this._normalImage.visible=false;
	}

	function onMouseUp (x,y) 
	{
		super.onMouseUp(x,y);
		this._selectImage.visible=false;
		this._normalImage.visible=true;
		// _title.color = _titleColor;
		if (x>=0 && y>=0 && x<=this.width&&y<=this.height) {
			this.exception();
		}
	}

	function exception () 
	{
		var exp = "";
		if (this.clickData.exp) {
			exp += this.clickData.exp;
			exp += ";";
		}
		var needDisabled = false;
		if (this.clickData.storage || this.clickData.target) {
			exp += "System.delegate.process(\"";
			exp += this.clickData.storage;
			exp += "\",\"";
			exp += this.clickData.target;
			exp += "\");";
		}
		if (exp != "") {
			asyncTrigger(Scripts.eval,[exp]);
		}
	}

	property disabled{
	    setter(v) {
	    	//setter
	    	if (super.disabled != v) {
	    		super.disabled = v;
	    		this._disableImage.visible = v;
	    		this._selectImage.visible = false;
	    		this._normalImage.visible = true;
	    		if (_title) {
		    		if (v) {
		    			_title.color = _titleColorDisable;
		    		}
		    		else {
		    			_title.color = _titleColor;
		    		}
	    		};
	    	}
		}
		getter {
	    	//getter
			return super.disabled;
		}
	}

	property title{
		getter {
			if (!_title) {
				_title = new Label(app,_imageBase);
				_title.setAnchor(0.5,0.5);
				_title.absolute = 1;
				_title.visible = false;
			}
			return _title;
		}
	}

	var _titleColor=0xffffffff;
	property titleColor{
	    setter(v) {
	    	//setter
	    	_title.color = v;
	    	_titleColor = v;
		}
		getter {
	    	//getter
			return _titleColor;
		}
	}

	var _titleColorSelect=0xffffffff;
	property titleColorSelect{
	    setter(v) {
	    	//setter
	    	_titleColorSelect = v;
		}
		getter {
	    	//getter
			return _titleColorSelect;
		}
	}

	var _titleColorDisable=0xffffffff;
	property titleColorDisable{
	    setter(v) {
	    	//setter
	    	_titleColorDisable = v;
		}
		getter {
	    	//getter
			return _titleColorDisable;
		}
	}
}


if(DEConfig.module.kag){
class LinkButtonLayer extends Button
{
	function LinkButtonLayer (app,par) {
		super.Button(...);
		setAnchor(0,1);
	}

	function setPos (x,y) {
		super.setPos(x,parent.height-y);
	}
}
}
