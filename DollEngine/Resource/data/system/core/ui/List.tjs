
class List extends Control
{
	var cellCreateHandler;//创建cell的回调函数
	var vertical = true;//滑动方向

	var _contentLayer = void;
	var _cells = %[];
	var _unusedCells = [];
	var _topCellIndex = 0;
	var cellWidth = 0;
	var cellHeight = 64;
	var _lastPos = 0;
	var _speed = 0;
	var _autobackTimeLine;
	var _autospeedTimer;

	function List (app,par) 
	{
		super.Control(...);
		setAnchor(0,0);
		scissor = true;
		_contentLayer = new global.Layer(app,this);
		_contentLayer.setAnchor(0,1);

		_autospeedTimer = new Timer(autoSpeed);
		_autospeedTimer.interval = 15;
	}

	function finalize () 
	{
		invalidate _autospeedTimer;
		invalidate _autobackTimeLine;
		super.finalize();
	}

	function setCellSize (w,h) 
	{
		cellWidth = w if w !== void;
		cellHeight = h if h !== void;
	}

	function updateContent () 
	{
		var offset = -_contentLayer.top;
		var maxY = _contentLayer.height - offset;
		var minY = maxY - height;
		if (_datas.count == 0) {
			foreach(_cells,function(key,value){
			    invalidate value;
			});
			_cells = %[];
			return;
		}

		//获得当前最上边的那个
		while(true){
			var minData = _datas[_topCellIndex];
			if (minData.cellPosY < minY) {
				break;
			}
			if (_topCellIndex+1>=_datas.count) {
				break;
			}
			++_topCellIndex;
		}
		while(true) {
			var maxData = _datas[_topCellIndex];
			if (maxData.cellPosY +maxData.cellHeight > maxY) {
				break;
			}
			if (_topCellIndex-1<0) {
				break;
			}
			--_topCellIndex;
		}

		// 移除画面范围之外的
		var tempcells = %[];
		(Dictionary.assignStruct incontextof tempcells)(_cells);
		foreach(tempcells,function(key,value)
		{
		    if(value.y < this[1] || value.y-value.height > this[2] )
		    {
		    	this[0]._unusedCells.add(value);
		    	this[0]._cells[key] = void;
		    	delete this[0]._cells[key];
		    }
		} incontextof [this,minY,maxY]);

		//更新cell
		for(var i=_topCellIndex; i<_datas.count; ++i) {
			var data = _datas[i];
			if (data.cellPosY + data.cellHeight < minY) {
				break;
			}
			cellCreateAtIndex(i);
		}

		// //更新cell
		// for (var i = _topCellIndex; i <= _bottomCellIndex; i++) {
		// 	cellCreateAtIndex(i);
		// };
	}

	var _datas=[];
	property datas{
	    setter(v) {
	    	//setter
	    	if (v instanceof "Array") {
	    		this._datas = v;
	    		var lastY = 0;
	    		for(var i=v.count-1; i>=0;--i) {
	    			var cellData = v[i];
	    			if (cellData instanceof "Dictionary") {
	    				cellData.cellIndex = i;
		    			cellData.cellPosY = lastY;
		    			if (!cellData.cellHeight) {
			    			lastY += cellHeightAtIndex(i);
			    			cellData.cellHeight = lastY - cellData.cellPosY;
		    			}
		    			else {
		    				lastY += cellData.cellHeight;
		    			}
	    			}
	    			else {
	    				em("List.data 的元素应为字典");
	    				return;
	    			}
	    		}
	    		_contentLayer.setSize(cellWidth,lastY);
	    		_contentLayer.top = 0;
	    		updateContent();
	    	}
	    	else {
	    		em("List 只接受Array类型的数据");
	    	}
		}
		getter {
	    	//getter
			return this._datas;
		}
	}

	function onMouseDown (x,y) 
	{
		var ret = super.onMouseDown(x,y);
		if(!ret) {
			return false;
		}
		_lastPos = y;
		if (_autobackTimeLine) {
			invalidate _autobackTimeLine;
			_autobackTimeLine = void;
		}
	}

	function onMouseMove (x,y) 
	{
		super.onMouseMove(x,y);
		_speed = _lastPos - y;
		if (_contentLayer.y < height|| _contentLayer.height < height) {
			//往下拉太多
			_speed *= 0.5;
		}
		else if (_contentLayer.y > _contentLayer.height) {
			_speed *= 0.5;
		}
		_contentLayer.y -= _speed;
		_lastPos = y;
		updateContent();
	}

	function onMouseUp (x,y) 
	{
		super.onMouseUp(x,y);
		_autospeedTimer.enabled = true;
	}

	function checkAutoback () 
	{
		if (_contentLayer.y < height || _contentLayer.height < height) {
			//往下拉太多                   
			_autobackTimeLine = new Timeline(app,_contentLayer);
			_autobackTimeLine.onTimelineFinished = autobackFinishid;
			_autobackTimeLine.onTimelineUpdate = updateContent;
			_autobackTimeLine.setKeyframe("y",void,height,200);
			_autobackTimeLine.start();
		}
		else if (_contentLayer.y > _contentLayer.height) {
			_autobackTimeLine = new Timeline(app,_contentLayer);
			_autobackTimeLine.onTimelineFinished = autobackFinishid;
			_autobackTimeLine.onTimelineUpdate = updateContent;
			_autobackTimeLine.setKeyframe("y",void,_contentLayer.height,200);
			_autobackTimeLine.start();
		}
	}

	function autoSpeed () 
	{
		if (_speed < 0.1&&_speed > -0.1) {
			_autospeedTimer.enabled = false;
			checkAutoback();
			return;
		}
		if (_contentLayer.y < height|| _contentLayer.height < height) {
			//往下拉太多
			_speed *= 0.5;
		}
		else if (_contentLayer.y > _contentLayer.height) {
			_speed *= 0.5;
		}
		_contentLayer.y -= _speed;
		_speed*=0.9;
		updateContent();
	}

	function autobackFinishid () 
	{
		_autobackTimeLine = void;
	}

	///delegate
	function cellCreateAtIndex (index) 
	{
		if (index < 0 || index >= _datas.count) {
			dm("cellCreateAtIndex index越界");
			return;
		}
		var cell = _cells[index];
		var cellData = _datas[index];
		if (!cell) {
			if (_unusedCells.count > 0) {
			 	cell = _unusedCells[-1];
			 	_unusedCells.erase(_unusedCells.count-1);
			}
			else {
				cell = new MessageLayer(app,_contentLayer);
			}
			_cells[index] = cell;
			cell.setPosition(%[
				top:_contentLayer.height - (cellData.cellPosY+cellData.cellHeight),
				width:cellWidth,
				height:cellData.cellHeight,
			]);
			if (cellCreateHandler) {
				cell.clearEr(true);
				cellCreateHandler(cell,cellData);
			}
		}
	}

	function cellHeightAtIndex (index) 
	{
		return cellHeight;
	}

}