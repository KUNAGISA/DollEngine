var htMask = 0;

class Layer extends GameObject
{
	//public
	var font;

	var hitType = htMask;

	//private
	var _image;
	var _imagePath;
	var _clipRect;
	var _fillImage;

	var _drawTexts = [];
	function Layer (app,par) {
		super.GameObject(app,par);
		font = new Font();
		_image = new Image();
	}

	function finalize () {
		invalidate font;
		invalidate _image;
		super.finalize();
	}

	function updateTransform () {
		super.updateTransform();
    	_image.startOpacity = _realOpacity;
    	_image.endOpacity = _realOpacity;
	}

	function loadImages (path) {
		if(_image.loadImages(path,""))
		{
			_imagePath = path;
			setSizeToImageSize();
			return true;
		}
		return false;
	}

	function freeImage () 
	{
		_imagePath = void;
		this._image.freeImage();
	}

	function clipRect (x,y,w,h) {
		_clipRect = [x,y,w,h];
		_image.clipRect(x,y,w,h);
		setSizeToImageSize();
	}

	function setSizeToImageSize () {
		setSize(_image.paintWidth,_image.paintHeight);
	}

	function setSize (w=void,h=void) {
		width = w if w!==void;
		height = h if h!==void;

	}

	function setPos (x=void,y=void,w=void,h=void) {
		this.x = x if x!==void;
		this.y = y if y!==void;
		setSize(w,h);
	}

	function setAnchor (x=void,y=void) {
		anchorX = x if x!==void;
		anchorY = y if y!==void;
	}

	function onPaint () {
		_image.paint(_transInWorld);
	}

	function onSave () {
		var dict = super.onSave();
		with(dict){
			.imagePath = _imagePath if _imagePath;
			.opacity = opacity if opacity!=255;
			.color = color if color!=0xffffff;
			.clipRect = _clipRect if _clipRect;
		}
		return dict;
	}

	function onLoad (dict) {
		super.onLoad(dict);
		with(dict){
			loadImages(.imagePath) if .imagePath != void;
			opacity = .opacity if .opacity !==void;
			color = .color if .color!==void;
			clipRect(.clipRect*) if .clipRect != void;
		}
	}

	function hasWheel () {
		return false;
	}

	function fillRect (x,y,w,h,color) {
		dm("失效的API:fillRect");
		for (var i = 0; i < _drawTexts.count; i++) {
			invalidate _drawTexts[i];
		};
	}

	function drawText (dx,dy,text,dcolor) {
		var lb = new Label(app,this);
		lb.setAnchor(0,1);
		lb.fontSize = font.size;
		lb.text = text;
		lb.setSizeToImageSize();
		lb.x = dx;
		lb.y = height-dy;
		lb.color = dcolor;
		_drawTexts.add(lb);
	}
	
	var _color=0xffffff;
	property color{
	    setter(v) {
	    	//setter
	    	this._color = v;
	    	this._image.startColor = this._image.endColor = v;
		}
		getter {
	    	//getter
			return this._color;
		}
	}

	var _hitThreshold = 16;
	property hitThreshold {
	    setter(v) {
	    	if (_hitThreshold != v) {
		    	_hitThreshold = v;
		    	if (v < 1) {
		    		control = true;
		    	}
		    	else {
		    		control = false;
		    	}
	    	};
	    }
	    getter {
	    	return _hitThreshold;
	    }
	}
}

class KAGLayer extends Layer
{
	function KAGLayer (app,par) {
		super.Layer(...);
	}
}
