
class Application extends SystemDelegate
{
	///public
	var window;
	var sysbase;
	var conductor;
	var enabled = true;
	var swallow = true;
	var visible = true;
	var parent = void;

	var status = %[];
	var deffont = %[
		size : DEConfig.game.deffont.size,
		color : 0xffffff,
		face : DEConfig.game.deffont.face,
	]; //默认字体设置

	//property
	var needRedraw;
	var needRetouch;

	//private
	var _enabledTimers;
	var _lastSeconds;
	var _transRTT;
	var _transTimeline;
	var _allTimelines;
	var _allAsyncTriggers = [];
	var _allTouches = [];
	var _triggerTouches = [];

	var _globalZOrder = -1;

	var _cacheData = %[];

	function Application () {
		super.SystemDelegate();


		_lastSeconds = System.seconds;
		_enabledTimers = global.Timer.g_enabledTimers;
		_allTimelines = new Set();
		_allTouches.add(this);

		initStatus();

		window = new Window();
		window.setLayerSize(DEConfig.device.width,DEConfig.device.height);
		window.setSize(DEConfig.device.width*DEConfig.device.scale,DEConfig.device.height*DEConfig.device.scale);
		window.visible = true;
		window.title = DEConfig.game.title;

		conductor = EventCenter.GetInstance();

		sysbase = new Layer(this,null);
		sysbase.setSize(window.layerWidth,window.layerHeight);
		sysbase.name = "sysbase";
		
		System.delegate = this;

	}

	function finalize () {
		if (_transRTT) {
			invalidate _transRTT;
		}
		saveSFlags();
		invalidate window;
		super.finalize();
	}

	function initStatus () {
		status.transitioning = false;//场景过渡中
		var fullpath = Storages.getFullPath("cache.db");
		if (fullpath && fullpath.length > 0) {
			_cacheData = Scripts.evalStorage("cache.db");
		}
		else {
			_cacheData = %[
				sf : %[],
			];
		}
		merger(global.sf,_cacheData.sf);
	}

	function close () {
		asyncTrigger(System.exit);
	}

    function saveSFlags () {
        _cacheData.sf = sf;
        (Dictionary.saveStruct incontextof _cacheData)("cache.db");
    }

	/*场景过渡效果*/
	function sceneTransition (type, time, params*) {
		if(status.transitioning) {
			dm("【过渡效果】场景正在过渡中");
			return;
		}
		dm("【过渡效果】场景开始过渡，预计耗时",time);
		if (!_transRTT) {		
			_transRTT = new RTTLayer(this,null);
			_transRTT.initSize(sysbase.width,sysbase.height);
			_transRTT.visible = false;
		}
		_transRTT.draw(sysbase);
		_transRTT.opacity = 255;
		_transRTT.visible = true;

		status.transitioning = true;
		this["sceneTrans"+type](time, params*);
	}

	function sceneTransCrossFade (time) {
		_transTimeline = new Timeline(this,_transRTT);
		_transTimeline.setKeyframe("opacity",255,0,time);
		_transTimeline.onTimelineFinished = onSceneTransFinished;
		asyncTrigger(_transTimeline.start);
	}

	function skipTransition () {
		if (_transTimeline) {
			_transTimeline.stop();
		}
	}

	function onSceneTransFinished () {
		_transRTT.visible = false;
		_transTimeline = void;
		status.transitioning = false;
		dm("【过渡效果】场景过渡完毕");
	}

	function pointInside (x,y,dict) {
		return sysbase.pointInside(x,y,dict);
	}
	/*帧刷新*/

	function update () {
		var nSeconds = System.seconds;
		var dt = (nSeconds - _lastSeconds)*1000;
        //dt = 1000/60;
		updateTimer(dt);
		updateTimeLine(dt);
		_lastSeconds = nSeconds;
	}

	function updateTimer (dt) {
		_enabledTimers.foreach(function (timer) {
			timer.activeTime += this[0];
			if(timer.activeTime >= timer.interval) {
				timer.activeTime -= timer.interval;
				timer.onTimer();
			}
		} incontextof [dt]) ;
	}

	function updateTimeLine (dt) {
		_allTimelines.foreach(function (tl) {
			tl.update(this[0]);
		} incontextof [dt]);
	}

	function onMainLoop () {
		update();
		window.beforeMainLoop();
		g_globalZOrder = 0;
		sysbase.visit();
		_allTouches.sort(function (a,b) {
			return a._globalZOrder < b._globalZOrder;
		});
		if(status.transitioning) {
			_transRTT.visit();
		}
		window.afterMainLoop();
		onAsyncTrigger();
	}

	function onAsyncTrigger () {
		for (var i = 0; i < _allAsyncTriggers.count; i++) {
			var func = _allAsyncTriggers[i][0];
			var elm = _allAsyncTriggers[i][1];
			if(elm){
				func(elm*);
			}
			else {
				func();
			}
		};
		_allAsyncTriggers.clear();
	}

	function onCheckMouseDown (x,y) {
		_triggerTouches.clear();
		var outPos = %[];
		if (_allTouches.count > 0) {
			var temp = [];
			temp.assign(_allTouches);
			for (var i = temp.count-1; i >= 0; --i) {
				var object = temp[i];
				if (isvalid object && object.enabled && object.visible) {
					var temp = object.parent;
					var __enabled = true;
					while(temp) {
						if (temp.enabled && temp.visible) {
							temp = temp.parent;
						}
						else {
							__enabled = false;
							break;
						}
					}
					if (!__enabled) {
						continue;
					};
					if (object.pointInside(x,y,outPos)) {
						var ret = object.onMouseDown(outPos.x,outPos.y);
						if(ret || ret === void) {
							_triggerTouches.add(object);
							if (object.swallow) {
								break;
							}
						}
					}
				}
			}
		}
		if (sysbase.pointInside(x,y,outPos)) {
			this.onMouseDown(outPos.x,outPos.y);
		}
	}

	function onCheckMouseUp (x,y) {
		var outPos = %[];
		if (_triggerTouches.count > 0) {
			for (var i = 0; i < _triggerTouches.count; i++) {
				var object = _triggerTouches[i];
				if (!isvalid object) {
					continue;
				};
				object.pointInside(x,y,outPos);
				object.onMouseUp(outPos.x,outPos.y);
			};
		};
		sysbase.pointInside(x,y,outPos);
		this.onMouseUp(outPos.x,outPos.y);
	}

	function onCheckMouseMove (x,y) {
		var outPos = %[];
		if (_triggerTouches.count > 0) {
			var outPos = %[];
			for (var i = 0; i < _triggerTouches.count; i++) {
				var object = _triggerTouches[i];
				if (!isvalid object) {
					continue;
				};
				object.pointInside(x,y,outPos);
				object.onMouseMove(outPos.x,outPos.y);
			};
		};
		sysbase.pointInside(x,y,outPos);
		this.onMouseMove(outPos.x,outPos.y);
	}

	function onCheckClick (x,y) {
		var outPos = %[];
		if (_triggerTouches.count > 0) {
			for (var i = 0; i < _triggerTouches.count; i++) {
				var object = _triggerTouches[i];
				if (!isvalid object) {
					continue;
				};
				object.pointInside(x,y,outPos);
				object.onClick(outPos.x,outPos.y);
			};
		};
		sysbase.pointInside(x,y,outPos);
		this.onClick(outPos.x,outPos.y);
	}

	function onMouseDown (x,y) {
		return true;
	}

	function onMouseUp (x,y) {
	}

	function onMouseMove (x,y) {
	}

	function onClick (x,y) {
	}
}