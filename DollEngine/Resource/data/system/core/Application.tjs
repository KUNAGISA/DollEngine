
class Application extends SystemDelegate
{
	///public
	var window;
	var sysbase;

	var status = %[];
	var deffont = %[]; //默认字体设置
	var deffontChanged = true;//默认字体是否有过变化

	//property
	var needRedraw;
	var needRetouch;

	//private
	var _enabledTimers;
	var _lastSeconds;
	var _transRTT;
	var _allTimelines;
	var _allAsyncTriggers = [];
	var _allTouches = [];
	var _triggerTouches = [];

	function Application () {
		super.SystemDelegate();


		_lastSeconds = System.seconds;
		_enabledTimers = global.Timer.g_enabledTimers;
		_allTimelines = new Set();
		initStatus();

		window = new Window();
		window.setLayerSize(DEConfig.device.width,DEConfig.device.height);
		window.setSize(DEConfig.device.width*DEConfig.device.scale,DEConfig.device.height*DEConfig.device.scale);
		window.visible = true;
		window.title = DEConfig.game.title;

		sysbase = new Layer(this,null);
		sysbase.setSize(window.width,window.height);

		_transRTT = new RTTLayer(this,null);
		_transRTT.draw(sysbase);
		_transRTT.visible=false;
		
		System.delegate = this;
	}

	function finalize () {
		invalidate window;
	}

	function initStatus () {
	}

	/*场景过渡效果*/
	function sceneTransition (type, time, params*) {
		if(_transRTT.visible) {
			dm("【过渡效果】场景正在过渡中");
			return;
		}
		dm("【过渡效果】场景开始过渡，预计耗时",time);
		_transRTT.draw(sysbase);
		_transRTT.opacity = 255;
		_transRTT.visible = true;
		this["sceneTrans"+type](time, params*);
	}

	function sceneTransCrossFade (time) {
		var tl = new Timeline(this,_transRTT);
		tl.setKeyframe("opacity",255,0,time);
		tl.onTimelineFinished = onSceneTransFinished;
		asyncTrigger(tl.start,void,tl);
	}
	/*帧刷新*/

	function update () {
		var nSeconds = System.seconds;
		var dt = (nSeconds - _lastSeconds)*1000;
		updateTimer(dt);
		updateTimeLine(dt);
		_lastSeconds = nSeconds;
	}

	function updateTimer (dt) {
		_enabledTimers.foreach(function (timer) {
			timer.activeTime += this[0];
			if(timer.activeTime >= timer.interval) {
				timer.activeTime -= timer.interval;
				timer.onTimer();
			}
		} incontextof [dt]) ;
	}

	function updateTimeLine (dt) {
		_allTimelines.foreach(function (tl) {
			tl.update(this[0]);
		} incontextof [dt]);
	}

	function onMainLoop () {
		update();
		window.beforeMainLoop();
		_allTouches.clear();
		sysbase.updateTouches();
		sysbase.visit();
		if(_transRTT.visible) {
			_transRTT.visit();
		}
		window.afterMainLoop();
		onAsyncTrigger();
	}

	function onSceneTransFinished () {
		_transRTT.visible = false;
		dm("【过渡效果】场景过渡完毕");
	}

	function onAsyncTrigger () {
		for (var i = 0; i < _allAsyncTriggers.count; i++) {
			var func = _allAsyncTriggers[i][0];
			var elm = _allAsyncTriggers[i][1];
			if(elm){
				func(elm*);
			}
			else {
				func();
			}
		};
		_allAsyncTriggers.clear();
	}

	function onMouseDown (x,y) {
		_triggerTouches.clear();
		if (_allTouches.count > 0) {
			var temp = [];
			temp.assign(_allTouches);
			var outPos = %[];
			for (var i = temp.count-1; i >= 0; --i) {
				var touch = temp[i];
				if (touch.ignore) {
					continue;
				}
				if (touch.pointInside(x,y,outPos)) {
					if(touch.onMouseDown(outPos.x,outPos.y)) {
						_triggerTouches.add(touch);
						if (touch.swallow) {
							return;
						}
					}
				}
			}
		}
	}

	function onMouseUp (x,y) {
		if (_triggerTouches.count > 0) {
			var outPos = %[];
			for (var i = 0; i < _triggerTouches.count; i++) {
				var touch = _triggerTouches[i];
				touch.pointInside(x,y,outPos);
				touch.onMouseUp(outPos.x,outPos.y);
			};
		};
	}

	function onMouseMove (x,y) {
		if (_triggerTouches.count > 0) {
			var outPos = %[];
			for (var i = 0; i < _triggerTouches.count; i++) {
				var touch = _triggerTouches[i];
				touch.pointInside(x,y,outPos);
				touch.onMouseMove(outPos.x,outPos.y);
			};
		};
	}

	function onClick (x,y) {
		if (_triggerTouches.count > 0) {
			var outPos = %[];
			for (var i = 0; i < _triggerTouches.count; i++) {
				var touch = _triggerTouches[i];
				touch.pointInside(x,y,outPos);
				touch.onClick(outPos.x,outPos.y);
			};
		};
	}
}