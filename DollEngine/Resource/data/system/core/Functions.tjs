/***********枚举值************/

//com组件类型
var COMP_UNKNOW=0,
COMP_UPDATE=1,
COMP_PAINT=2,
COMP_TOUCH=3;

//等待点击的类型
var WAIT_CLICK_NONE = 0,
WAIT_CLICK_WORD = 1,
WAIT_CLICK_MOVE = 2,
WAIT_CLICK_ACTION = 3,
WAIT_CLICK_TRANS = 4,
WAIT_CLICK_TIME = 5,
WAIT_CLICK_L = 6,
WAIT_CLICK_P = 7;

//拖拽的方向
var DRAG_NONE = 0,
DRAG_HORIZONTAL = 1,
DRAG_VERTICAL = 2,
DRAG_FREE = 3;

/***********字典操作************/

function merger (dst, src) 
{
    foreach(src, function (key,value) 
    {
        this[key] = value;
    } incontextof dst);
}

function clone (db) 
{
    if (typeof db == "Object") {
        if (db instanceof 'Array') {
            var arr = [];
            arr.assignStruct(db);
            return arr;
        }
        else if(db instanceof 'Dictionary') {
            var dict = %[];
            (Dictionary.assignStruct incontextof dict)(db);
            return dict;
        }
        else if(db instanceof 'Date') {
            var tstr = "%d/%d/%d %d:%d:%d";
            tstr.sprintf(db.getYear(),db.getMonth(),db.getDate(),db.getHours(),db.getMinutes(),db.getSeconds());
            return new Date(tstr);
        }
        else {
            if (typeof db.clone != 'undefined') {
                return db.clone();
            }
        }
    }
    else if(typeof db == 'undefined') {
        return void;
    }
    else {
        return db;
    }
}

function dump (db,tab=0,key=void) 
{
    if (key) {
        key += " : ";
    }
    if (typeof db == "Object") {
        if (db instanceof 'Array') {
            print(" ".repeat(tab*4)+key+"[");
            for (var i = 0; i < db.count; i++) {
                dump(db[i],tab+1);
            };
            print(" ".repeat(tab*4)+"],");
        }
        else if(db instanceof 'Dictionary') {
            print(" ".repeat(tab*4)+key+"%[");
            foreach(db,function(key,value){
                dump(value,this[0]+1,key);
            } incontextof [tab]);
            print(" ".repeat(tab*4)+"],");
        }
        else if(db instanceof 'Date') {
            var tstr = "%d/%d/%d %d:%d:%d".sprintf(db.getYear(),db.getMonth(),db.getDate(),db.getHours(),db.getMinutes(),db.getSeconds());
            print(" ".repeat(tab*4)+key+tstr+",");
        }
        else {
            print(" ".repeat(tab*4)+key+(string)db+",");
        }
    }
    else if(typeof db == 'undefined') {
        print(" ".repeat(tab*4)+key+"void,");
    }
    else if(typeof db == 'String'){
        print(" ".repeat(tab*4)+key+"\""+db+"\",");
    }
    else if(typeof db == 'void'){
        print(" ".repeat(tab*4)+key+"void,");
    }
    else {
        print(" ".repeat(tab*4)+key+(string)db+",");
    }
}

/***********debug************/

function dm (arr*) 
{
    for (var i = 0; i < arr.count; i++) {
        if(typeof arr[i] == "void"){
            arr[i] = "(void)";
        }
    };
    var str = arr.join('  ');
    print(str);
}

function printf (format,arr*) 
{
    var str = format.sprintf(arr*);
    print(str);
}

function assert (obj,text="断言失败") 
{
    if (!obj) {
        em(text);
    }
}

/***********路径操作************/


function getExistImagePath (path) 
{
    var fullpath = Storages.getFullPath(path);
    if (!fullpath) {
        fullpath = Storages.getFullPath(path+'.png');
        if (!fullpath) {
            fullpath = Storages.getFullPath(path+'.jpg');
            if (!fullpath) {
                fullpath = Storages.getFullPath(path+'.jpeg');
            }
        }
    }
    return fullpath;
}

function getExistSoundPath (path) 
{
    var fullpath = Storages.getFullPath(path);
    if (!fullpath) {
        fullpath = Storages.getFullPath(path+'.mp3');
        if (!fullpath) {
            fullpath = Storages.getFullPath(path+'.wav');
            // if (!fullpath) {
            //     fullpath = Storages.getFullPath(path+'.ogg');
            // }
        }
    }
    return fullpath;
}

/***********动作操作************/

function asyncTrigger (func,elm,obj) {
    System.delegate._allAsyncTriggers.add([func,elm,obj]);
}

function delayTrigger (time,func,elm) {
    var t = new Timer(func,elm);
    t.interval = time;
    t.count = 1;
    t.enabled = true;
    return t;
}
