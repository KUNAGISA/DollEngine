
class TagHandlers extends KAGController
{
	var tagTimer = void;
	var macroParams = [];
	var tagHandlers;
	var owner;
	function TagHandlers (app) 
	{
		super.KAGController();
		this.owner = app;
		tagHandlers = app.tagHandlers;
		tagTimer = new Timer();
		tagTimer.enabled = false;
	}

	function proccess (storage="",label="") 
	{
		if(this.stepInLabel(storage,label,false)) {
			return true;
		}
		else {
			em("跳转%s:%s失败",storage,label);
			return false;
		}
	}

	function callStorage (storage="",label="") 
	{
		if(this.stepInLabel(storage,label,true)) {
			return true;
		}
		else {
			em("呼叫%s:%s失败",storage,label);
			return false;
		}
	}

	function execTags () 
	{
		var isjump = false;
		while(true){
			var time = doTag();
			if (time == -2) {
				//停止，或等待点击
				return;
			}
			else if(time == -1) {
				//即将跳转
				isjump = true;
				break;
			}
			else if(time > 0){
				waitTime(time);
				return;
			}
			stepNext();
		}
		if (isjump) {
			this.execTags();
			// action.async(function () 
			// {
			// 	this.execTags();
			// } incontextof this);
		}
	}

	function onExecute (name,params) 
	{
		app.status.waitClickMode = 0;
		if (app.status.isClickSkip && name != 'ch' && name != 'locate' && name != 'r') {
			app.status.isClickSkip = false;
		}
		if (name == "return") {
			if(this.stepOutLabel()){
				this.stepNext();
			}
			else {
				em("不对应的return或endmacro");
			}
			return -1;
		}
		if (name == "endmacro") {
			this.macroParams.erase(this.macroParams.count-1);
			if(this.stepOutLabel()){
				this.stepNext();
			}
			else {
				em("不对应的return或endmacro");
			}
			return -1;
		}
		if(typeof this.tagHandlers[name] != "undefined")
		{
			var time = this.tagHandlers[name](params);
			app.status.clickToNext = false;
			if(time == void || time == 0) {
				return 0;
			}
			else {
				return time;
			}
		}
		else
		{
			if(this.stepInLabel("MACRO",name,true))
			{
				this.macroParams.add(params);
				return -1; //即将jump
			}
			else
			{
				print("未找到指令"+name);
				return 0;
			}
		}
	}

	function doNext () 
	{
		this.tagTimer.enabled = false;
		stepNext();
		Scripts.addAsyncFunction(App.main.tagManager.execTags);
	}

	function waitTime (time) 
	{
		tagTimer.time = 0;
		tagTimer.interval = time;
		tagTimer.enabled = true;
		tagTimer.handler = function () 
		{
			tagTimer.enabled = false;
			stepNext();
			execTags();
		} incontextof this;
	}

	function getMacroParams () 
	{
		if (this.macroParams.count == 0) {
			em("macro参数为空，一定是哪里有问题了");
		}
		return this.macroParams[-1];
	}

}

property mp{
	getter {
		return App.main.tagManager.getMacroParams();
	}
}

