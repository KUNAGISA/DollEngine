
class TagHandlers extends KAGParser
{
	var owner; //函数所调用的对象，通常是App对象
	var curFile;
	var macroParams = [];
	var tagHandlers;
	var ifExp = [];
	function TagHandlers (object) 
	{
		super.KAGParser();
		this.owner = object;
		this.tagHandlers = object.tagHandlers;
	}

	function onExecute (name, params)
	{
		if (name == 'jumpTo'||
			name == 'onExecute'||
			name == 'returnCall'||
			name == 'callMacro'||
			name == 'returnMacro'||
			name == 'getMacroParams'||
			name == 'onScenarioEnded') {
			print("%s指令被TagHandlers类占用",name);
		}
		this.owner.status.waitClickMode = 0;
		if(typeof this.tagHandlers[name] != "undefined")
		{
			var time = this.tagHandlers[name](params);
			if(time == void || time == 0) {
				return 0;
			}
			else {
				if (this.owner.status.waitClickMode == 1 && this.owner.status.isClickSkip) {
					if (name == "ch") {
						return 0;
					}
					else {
						this.owner.status.isClickSkip = false;
					}
				}
				return time;
			}
		}
		else
		{
			if(this.callMacro(name))
			{
				this.macroParams.add(params);
				return -1;
			}
			else
			{
				print("未找到指令"+name);
				// return -2;
			}
		}
	}

	function jumpTo (file, label) 
	{
		if (!file) {
			file = curFile;
		}
		if (!label) {
			label = "_def_";
		}
		curFile = file;
		super.jumpTo(file,label);
	}

	function returnMacro ()
	{
		this.macroParams.erase(this.macroParams.count-1);
		this.returnCall();
		return -1;
	}

	function getMacroParams () 
	{
		if (this.macroParams.count == 0) {
			em("macro参数为空，一定是哪里有问题了");
		}
		return this.macroParams[-1];
	}

	function onScenarioEnded () 
	{
	}

}

property mp{
	getter {
		return App.main.tagManager.getMacroParams();
	}
}