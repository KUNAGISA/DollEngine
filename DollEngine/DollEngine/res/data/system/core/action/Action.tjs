var ACTION_KEY = 0;

class Action
{
	var duration = 0;//动作时长
	var time = 0;
	var paused = false;
	var target = void;//影响的目标
	var manager = void;
	var key = 0;
	var timeScale = 1;
	function Action ()
	{
		this.key = ACTION_KEY++;
	}

	function finalize () 
	{
		if (manager) {
			manager.removeAction(this);
		}
	}

	function update (dt) 
	{
	}

	function initialize () 
	{
	}

	//当动作会被释放的时候该值将会改变
	var _released=false;
	property released{
		getter {
	    	//getter
			return this._released;
		}
	}
}

class Sequence extends Action
{
	var current = void;
	function Sequence (array) 
	{
		super.Action();
		this.first = array[0];
		array.erase(0);
		if (array.count == 0) {
			return;
		}
		else if(array.count == 1){
			this.second = array[0];
		}
		else {
			this.second = new global.Sequence(array);
		}
	}

	function finalize () 
	{
		if (isvalid this.first) {
			invalidate this.first;
		}
		if (this.second && isvalid this.second) {
			invalidate this.second;
		}
		super.finalize();
	}

	function initialize () 
	{
		this.current = first;
		this.current.initialize();
		if (this.current.released) {
			if (second) {
				this.current = second;
				this.current.initialize();
				if (this.current.released) {
					this._released = true;
					return;
				}
			}
			else {
				this._released = true;
			}
		}
	}

	function update (dt) 
	{
		var t = this.duration*dt;
		if (this.current == first) {
			var p = t/first.duration;
			if (p >= 1) {
				this.current.update(1);
				this.current = second;
				if (this.current) {
					this.current.initialize();
					if (this.current.released) {
						this._released = true;
						return;
					}
				}
				else {
					this._released = true;
					return;
				}
			}
			else {
				this.current.update(p);
				return;
			}
		}
		t -= first.duration;
		var p = t/second.duration;
		if (p >= 1) {
			this.current.update(1);
			this._released = true;
		}
		else {
			this.current.update(p);
		}
	}

	var _first=void;
	property first{
	    setter(v) {
	    	//setter
	    	this._first = v;
    		this.duration = this._first.duration+(this._second==void?0:this._second.duration);
		}
		getter {
	    	//getter
			return this._first;
		}
	}

	var _second=void;
	property second{
	    setter(v) {
	    	//setter
	    	this._second = v;
    		this.duration = this._second.duration+(this._first==void?0:this._first.duration);
		}
		getter {
	    	//getter
			return this._second;
		}
	}
}

class Spawn extends Action
{
	var allActions;
	function Spawn (array) 
	{
		super.Action(void,0);
		this.allActions = array;
		this.duration = 0;
		for (var i = 0; i < array.count; i++) {
			if(array[i].duration > this.duration)
				this.duration = array[i].duration;
		};
	}

	function finalize () 
	{
		for (var i = 0; i < this.allActions.count; i++) {
			invalidate this.allActions[i];
		};
		super.finalize();
	}

	function initialize () 
	{
		var rs = true;
		for (var i = 0; i < this.allActions.count; i++) {
			var act = this.allActions[i];
			act.initialize();
			if (!act.released) {
				rs = false;
			}
		};
		this._released = rs;
	}

	function update (dt) 
	{
		var rs = true;
		for (var i = 0; i < this.allActions.count; i++) {
			var act = this.allActions[i];
			if (!act.released) {
				var p = act.duration/this.duration;
				p = dt/p;
				if (p >= 1) {
					p = 1;
					act.update(1);
					act._released = true;
				}
				else {
					act.update(p);
					rs = false;
				}
			}
		}
		this._released = rs;
	}
}

class MoveTo extends Action
{
	var tx=0;
	var ty=0;
	var sx=0;
	var sy=0;
	function MoveTo (obj,time,x,y) 
	{
		super.Action();
		assert(obj);
		this.target = obj;
		this.duration = time;
		this.tx = x;
		this.ty = y;
	}

	function initialize () 
	{
		this.sx = this.target.x;
		this.sy = this.target.y;
		if (this.duration == 0) {
			this.update(1);
			this._released = true;
		}
	}

	function update (dt) 
	{
		this.target.x = this.sx + (this.tx-this.sx)*dt;
		this.target.y = this.sy + (this.ty-this.sy)*dt;
	}
}

class FadeTo extends Action
{
	var so =0;
	var to =0;
	function FadeTo (obj,time,o) 
	{
		super.Action();
		assert(obj);
		this.target = obj;
		this.duration = time;
		this.to = o;
	}

	function initialize () 
	{
		this.so = this.target.opacity;
		if (this.duration == 0) {
			this.target.opacity = this.to;
			this._released = true;
		}
	}

	function update (dt) 
	{
		this.target.opacity = (this.to-this.so)*dt + this.so;
	}
}

class DelayTime extends Action
{
	function DelayTime (time) 
	{
		super.Action();
		this.duration = time;
	}
}

class CallFunc extends Action
{
	var datas = void;
	var exec = void;
	function CallFunc (func,datas*) 
	{
		super.Action();
		this.datas = datas;
		this.exec = func;
	}

	function update (dt) 
	{
		this.exec(datas*);
	}
}
