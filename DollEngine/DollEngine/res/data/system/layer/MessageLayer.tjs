
class MessageLayer extends Node
{
	var frameImage = void;//message层的背景
	var frameColor = void;//message层的颜色
	var chLayer = void;//message层的文字层
	var controlLayer = void;//message层的控件层

	var names = %[]; //用于存放control
	var buttons = %[]; //用于存放syscontrol
	var links = []; //用于存放文字链接

	var locateX = 0;
	var locateY = 0;

	var uiIndex = 0;
	function MessageLayer (par) 
	{
		super.Node(par);
		this.setAnchor(0,1);
		this.frameImage = new Sprite(this);
		this.frameImage.visible = false;
		this.frameImage.setAnchor(0,1);
		this.frameImage.absolute = -3;
		this.frameColor = new LayerColor(this);
		this.frameColor.visible = false;
		this.frameColor.absolute = -3;

		this.chLayer = new TextLayer(this);
		this.chLayer.visible = true;
		this.chLayer.absolute = -2;

		this.controlLayer = new global.Node(this);
		this.controlLayer.visible = true;
		this.controlLayer.absolute = -1;
	}

	function setPosition (elm) 
	{
		this.x = elm.left if elm.left !== void;
		this.y = this.parent.height-elm.top;
		this.width = elm.width if elm.width !== void;
		this.height = elm.height if elm.height !== void;
		if (elm.frame) {
			this.frameColor.visible = false;
			this.frameImage.loadImages(elm.frame);
			this.frameImage.y = this.height;
			this.frameImage.visible = true;
			this.frameImage.opacity = elm.opacity if elm.opacity !== void;
		}
		else {
			this.frameImage.visible = false;
			this.frameColor.setSize(this.width,this.height);
			this.frameColor.y = this.height;
			this.frameColor.visible = true;
			this.frameColor.opacity = elm.opacity if elm.opacity !== void;
		}
		this.chLayer.x = (elm.marginl===void?0:elm.marginl);
		this.chLayer.y = (elm.marginb===void?0:elm.marginb);
		this.chLayer.width = this.width - this.chLayer.x - (elm.marginr===void?0:elm.marginr);
		this.chLayer.height = this.height - this.chLayer.y - (elm.margint===void?0:elm.margint);
		this.chLayer.refreshCH();
		this.controlLayer.setPos(this.chLayer.x,this.chLayer.y,this.chLayer.width,this.chLayer.height);
	}

	function clearEr (sys=false) 
	{
		this.chLayer.clearCH();
		var syses = [];
		for (var i = 0; i < this.controlLayer.children.count; ++i) {
			var control = this.controlLayer.children[i];
			if(sys && control.issystem)
			{
				syses.add(control);
			}
			else {
				invalidate control;
			}
		};
		this.controlLayer.children.clear();
		this.controlLayer.children = syses;
		this.names = %[];
		this.links.clear();
		this.uiIndex = 0;
	}


	/********控件创建********/
	function addButton (elm) 
	{
		if (elm.name == void) {
			elm.name = "_num_"+this.uiIndex;
		}
		var node = new Button(this.controlLayer);
		node.issystem = elm.issys===void?false:elm.issys;
		if (node.issystem) {
			this.buttons[elm.name] = node;
		}
		else {
			this.names[elm.name] = node;
		}
		if (elm.graphic) {
			node.graphicImage = elm.graphic;
		}
		else {
			node.normalImage = elm.normal;
			node.selectImage = elm.on;
		}
		node.setAnchor(0,1);
		node.x = +elm.x;
		node.y = node.parent.height-elm.y;
		node.enabled = elm.enabled if elm.enabled!==void;

		node.clickData.exp = elm.exp if elm.exp!==void;
		node.clickData.se = elm.se if elm.se!==void;
		node.clickData.sebuf = elm.sebuf if elm.sebuf!==void;
		node.clickData.callback = elm.callback if elm.callback!==void;
		node.clickData.storage = elm.storage if elm.storage!==void;
		node.clickData.target = elm.target if elm.target!==void;

		++this.uiIndex;
	}

	function addText (text,x,y) 
	{
		var node = new Label(this.chLayer);
		node.setAnchor(0,1);
		node.text = text;
		node.setSizeToImageSize();
		//这里还要设置文字属性
		node.x = x;
		node.y = node.parent.height-y;
		//这里需要另加字间距
		x += node.width;
		if (x+node.width > this.chLayer.width) {
			x = 0;
			y += node.height*1.3;
			if (y + node.height > this.chLayer.height) {
				return [0,0,true];
			}
		}
		return [x,y,false];
	}
}