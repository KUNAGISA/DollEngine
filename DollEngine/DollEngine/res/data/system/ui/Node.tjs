
class Node extends GameObject
{
	var name;//名称
	var children=[];
	var _needSortChildren=false;
	function Node (par=void) 
	{
		super.GameObject();
		this.parent = par;
		if (par) {
			par.children.add(this);
		}
	}

	function finalize () 
	{
		if (this.parent) {
			this.parent.children.remove(this);
		}
		this.parent = void;
		for (var i = this.children.count - 1; i >= 0; i--) {
			this.children[i].parent = void;
			invalidate this.children[i];
		};
		this.children.clear();
		super.finalize();
	}

	function visit () 
	{
		if (!this.visible) {
			return;
		}
		this.transform();
		var count = this.children.count;
		if (count > 0) {
			if (this._needSortChildren) {
				this.children.sort(function (a,b) 
				{
					return a.absolute < b.absolute;
				});
			}
			var i=0;
			for (; i < count; i++) {
				if(this.children[i].absolute >=0) {
					break;
				}
				this.children[i].visit();
			};
			this.onPaint();
			for (; i < count; i++) {
				this.children[i].visit();
			};
		}
		else {
			this.onPaint();
		}
	}

	function onTouchUpdate () 
	{
		if (enabled) {
			super.onTouchUpdate();
			for (var i = 0; i < this.children.count; i++) {
				this.children[i].onTouchUpdate();
			};
		}
	}

	function setSize (w=void,h=void) 
	{
		this.width = w if w !== void;
		this.height = h if h !== void;
	}

	function setPos (x,y,w=void,h=void) 
	{
		this.x = x if x !== void;
		this.y = y if y !== void;
		this.width = w if w !== void;
		this.height = h if h !== void;
	}

	function setAnchor (x=void,y=void) 
	{
		this.anchorX = x if x !== void;
		this.anchorY = y if y !== void;
	}

	function beginTransition (elm) 
	{
		
	}

	property absolute{
	    setter(v) {
	    	//setter
	    	if (super.absolute != v) {
	    		super.absolute = v;
	    		this._needSortChildren = true;
	    	}
		}
		getter {
	    	//getter
			return super.absolute;
		}
	}
}

Node.DrawIndex = 0;

