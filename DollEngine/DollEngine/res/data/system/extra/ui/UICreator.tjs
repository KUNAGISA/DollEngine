
class UICreator
{
	function getPosByType (node, posArr,hd) 
	{
        var par_width,par_height;
        if(node.parent)
        {
            par_width = node.parent.width;
            par_height = node.parent.height;
        }
        else
        {
            par_width = App.mainApp.width;
            par_height = App.mainApp.height;
        }
        var posTypeOrgin=posArr[2],posTypeX=posArr[3],posTypeY=posArr[4];
        if(posArr.count < 3) {
            posTypeOrgin = node.posType.orgin;
            posTypeX = node.posType.x;
            posTypeY = node.posType.y;
        }
        else {
            node.posType = %[
                orgin : posArr[2],
                x : posArr[3],
                y : posArr[4]
            ];
        }
        var x=posArr[0],y=posArr[1];
        if(posTypeX == 2)
        {
            x = par_width*x;
        }
        else {
            x*=2 if hd;
        }
        if(posTypeY == 2)
        {
            y = par_height*y;
        }
        else {
            y*=2 if hd;
        }
        if(posTypeOrgin == 1)
        {
            y = par_height-y;
        }
        else if(posTypeOrgin == 2)
        {
            x = par_width-x;
            y = par_height-y;
        }
        else if(posTypeOrgin == 3)
        {
            x = par_width-x;
        }
        return [x,y];
	}

	function getSizeByType (node,sizeArr,hd) 
	{
		var par_width,par_height;
        if(node.parent)
        {
            par_width = node.parent.width;
            par_height = node.parent.height;
        }
        else
        {
            par_width = App.mainApp.width;
            par_height = App.mainApp.height;
        }
        var w=sizeArr[0],h=sizeArr[1];
        if(sizeArr[2] == 2)
        {
            w = par_width*w;
        }
        else {
            w*=2 if hd;
        }
        if(sizeArr[3] == 2)
        {
            h = par_height*h;
        }
        else {
            h*=2 if hd;
        }
        return [w,h];
	}

	function setNodeProperties (node,data,owner, isccbfile,hd) 
	{
		if (data.name && !isccbfile) {
			if (owner.names) {
				owner.names[data.name] = node;
			}
		}
		node.name = data.name;

		if (typeof data.visible == 'undefined') {
			node.visible = true;
		}
		else {
			node.visible = data.visible;
		}

        if (data.anchorPoint) {
            node.setAnchor(data.anchorPoint*);
        }

        if (data.contentSize) {
            var size = getSizeByType(node,data.contentSize,hd);
            node.setSize(size*);
        }

		if (data.position) {
			var pos = getPosByType(node,data.position,hd);
			node.setPos(pos*);
		}


        if(data.ignoreAnchorPointForPosition) {
            node.ignoreAnchorPointForPosition = data.ignoreAnchorPointForPosition;
        }

        if (data.scale) {
        	node.scaleX = data.scale[0];
        	node.scaleY = data.scale[1];
        }

        if (data.opacity) {
        	node.opacity = data.opacity*255;
        }
        if (data.rotation) {
        	node.rotation = data.rotation;
        }

        if (data.color) {
            if (typeof node.setColorF != 'undefined') {
                node.setColorF(data.color*);
            }
        }
	}

    function create_CCNode () 
    {
        var node = new Node();
        return node;
    }

	function create_CCNodeGradient (owner,parent,properties,customProperties) 
    {
        var node = new LayerColor(parent);
        // dump(properties);
        node.startColor = colorBy4F(properties.startColor*);
        node.endColor = colorBy4F(properties.endColor*);
        if (properties.vector[0]==0) {
            if(properties.vector[1]>=0){
                node.gradVector = 0;
            }
            else {
                node.gradVector = 1;
            }
        }
        else {
            if(properties.vector[0]<=0){
                node.gradVector = 2;
            }
            else {
                node.gradVector = 3;
            }
        }
        return node;
    }


    function create_CCLabelTTF (owner,parent,properties,customProperties,hd) 
    {
        var node = new Label(parent);
        node.color = colorBy4F(properties.fontColor*);
        node.text = properties.string[0];
        node.font.fontName = properties.fontName;
        node.font.fontSize = properties.fontSize[0];
        node.font.fontSize *=2 if hd;
        return node;
    }

    function create_CCSprite (owner,parent,properties,customProperties,hd) 
    {
        var node = new Sprite(parent);
        node.loadImages(properties.spriteFrame[1],properties.spriteFrame[0]);
        return node;
    }

    function create_CCButton (owner,parent,properties,customProperties,hd) 
    {
        var node = new Button(parent);
        dump(properties);
        var param = [
            properties.backgroundSpriteFrame_Normal[1],
            properties.backgroundSpriteFrame_Highlighted[1],
            properties.backgroundSpriteFrame_Disabled[1],
            properties.backgroundSpriteFrame_Normal[0],
            properties.backgroundSpriteFrame_Highlighted[0],
            properties.backgroundSpriteFrame_Disabled[0]
        ];
        node.normalImage = [properties.backgroundSpriteFrame_Normal[1],properties.backgroundSpriteFrame_Normal[0]];
        node.selectImage = [properties.backgroundSpriteFrame_Highlighted[1],properties.backgroundSpriteFrame_Highlighted[0]];
        node.disableImage = [properties.backgroundSpriteFrame_Disabled[1],properties.backgroundSpriteFrame_Disabled[0]];
        node.title = properties.title[0];
        node.titleFontName = properties.fontName;
        node.titleFontSize = properties.fontSize[0];
        node.titleFontSize *= 2 if hd;
        node.titleColor = colorBy4B(properties.fontColor*);
        node.titleColorSelect = colorBy4F(properties.labelColor_Highlighted*) if properties.labelColor_Highlighted;
        node.titleColorDisable = colorBy4F(properties.labelColor_Disabled*) if properties.labelColor_Disabled;
        node.disabled = !properties.userInteractionEnabled;
        return node;
    }
}