
class MessageLayer extends UILayer
{
	var frameImage = void;//message层的背景
	var frameColor = void;//message层的颜色
	var chLayer = void;//message层的文字层
	var controlLayer = void;//message层的控件层
	var _sw1;//当frame有值时用来遮罩点击
	var _sw2;//当frame有值时用来遮罩点击

	var names = %[]; //用于存放control
	var syscontrol = %[]; //用于存放syscontrol
	var links = []; //用于存放文字链接

	var locateX = 0;
	var locateY = 0;
	var margin = %[
		l : 0,
		r : 0,
		t : 0,
		b : 0,
	];

	var uiIndex = 0;

	var font = %[
		size : 22,
		face : "WenQuanYi Micro Hei",
		lineSpacing : 10,//行距
		wordSpacing : 0,//字间距
	];
	function MessageLayer (par) 
	{
		super.UILayer(par);
		this.setAnchor(0,1);
		this.frameImage = new Sprite(this);
		this.frameImage.visible = false;
		this.frameImage.setAnchor(0,1);
		this.frameImage.absolute = -3;
		this._sw1 = new Touch();
		this._sw1.object = this.frameImage;
		this._sw1.onMouseDown = function (x,y){
			if(this.opacity < 16)
				this._sw1.ignore=true;
		} incontextof this;
		this._sw1.swallow = true;
		this._sw1.enabled = true;

		this.frameColor = new LayerColor(this);
		this.frameColor.visible = false;
		this.frameColor.absolute = -3;
		this._sw2 = new Touch();
		this._sw2.object = this.frameColor;
		this._sw2.onMouseDown = function (x,y){
			if(this.opacity < 16)
				this._sw2.ignore=true;
		} incontextof this;
		this._sw2.swallow = true;
		this._sw2.enabled = true;

		this.chLayer = new WordLayer(this);
		this.chLayer.visible = true;
		this.chLayer.absolute = -2;

		this.controlLayer = new global.Node(this);
		this.controlLayer.visible = true;
		this.controlLayer.absolute = -1;

		this.setPosition(%[
				left:0,
				top:0,
				width:par.width,
				height:par.height,
				color:void,
				opacity:255
			]);
	}

	function finalize () 
	{
		invalidate _sw1;
		invalidate _sw2;
		super.finalize();
	}

	function onTouchUpdate () 
	{
		if (this.enabled) {
			if (frameImage.visible) {
				_sw1.addToManager();
			}
			if (frameColor.visible) {
				_sw2.addToManager();
			}
			for (var i = 0; i < this.children.count; i++) {
				this.children[i].onTouchUpdate();
			};
		}
	}

	function setPosition (elm) 
	{
		this.x = elm.left if elm.left !== void;
		this.y = this.parent.height-elm.top if elm.top !== void;
		this.width = elm.width if elm.width !== void;
		this.height = elm.height if elm.height !== void;
		this.visible = elm.visible if elm.visible!==void;
		margin.l = elm.marginl if elm.marginl!==void;
		margin.r = elm.marginr if elm.marginr!==void;
		margin.t = elm.margint if elm.margint!==void;
		margin.b = elm.marginb if elm.marginb!==void;
		if (elm.frame) {
			this.frameColor.visible = false;
			this.frameImage.loadImages(elm.frame);
			this.frameImage.y = this.height;
			this.frameImage.visible = true;
			this.frameImage.opacity = elm.opacity if elm.opacity !== void;
		}
		else {
			this.frameImage.visible = false;
			if (elm.color !== void) {
				var x = (elm.marginl===void?0:elm.marginl);
				var y = (elm.marginb===void?0:elm.marginb);
				var w = this.width - this.frameColor.x - (elm.marginr===void?0:elm.marginr);
				var h = this.height - this.frameColor.y - (elm.margint===void?0:elm.margint);

				this.frameColor.color = elm.color;
				this.frameColor.x = x;
				this.frameColor.y = y;
				this.frameColor.setSize(w,h);
				this.frameColor.visible = true;
				this.frameColor.opacity = elm.opacity if elm.opacity !== void;
			}
			else {
				this.frameColor.visible=false;
			}
		}
		this.chLayer.x = margin.l;
		this.chLayer.y = margin.b;
		this.chLayer.width = this.width - this.chLayer.x - margin.r;
		this.chLayer.height = this.height - this.chLayer.y - margin.t;
		this.chLayer.refreshWord();
		this.controlLayer.setPos(this.chLayer.x,this.chLayer.y,this.chLayer.width,this.chLayer.height);
	}

	function clearWord () 
	{
		this.chLayer.clearWord();
		this.locateX = 0;
		this.locateY = 0;
	}

	function clearEr (sys=false) 
	{
		clearWord();
		var syses = [];
		for (var i = 0; i < this.controlLayer.children.count; ++i) {
			var control = this.controlLayer.children[i];
			if(sys && control.issystem)
			{
				syses.add(control);
			}
			else {
				invalidate control;
			}
		};
		this.controlLayer.children.clear();
		this.controlLayer.children = syses;
		this.names = %[];
		this.links.clear();
		this.uiIndex = 0;
	}

	function locateChangeLine () 
	{
		this.locateX = 0;
		this.locateY += this.font.size+this.font.lineSpacing;
		if (this.locateY+this.font.size>this.chLayer.height) {
			this.locateY=0;
			return false;
		}
		return true;
	}

	/********控件创建********/
	function addButton (elm) 
	{
		if (elm.name == void) {
			elm.name = "_num_"+this.uiIndex;
		}
		var node = new Button(this.controlLayer);
		node.issystem = elm.issys===void?false:elm.issys;
		if (node.issystem) {
			this.syscontrol[elm.name] = node;
		}
		else {
			this.names[elm.name] = node;
		}
		if (elm.graphic) {
			node.graphicImage = elm.graphic;
		}
		else {
			node.normalImage = elm.normal;
			node.selectImage = elm.on;
		}
		if (elm.title) {
			node.title = elm.title;
			node.titleColor = elm.color if elm.color!==void;
		}
		node.setAnchor(0,1);
		node.x = +elm.x;
		node.y = node.parent.height-elm.y;
		node.enabled = elm.enabled if elm.enabled!==void;

		node.clickData.exp = elm.exp if elm.exp!==void;
		node.clickData.se = elm.se if elm.se!==void;
		node.clickData.sebuf = elm.sebuf if elm.sebuf!==void;
		node.clickData.callback = elm.callback if elm.callback!==void;
		node.clickData.storage = elm.storage if elm.storage!==void;
		node.clickData.target = elm.target if elm.target!==void;

		++this.uiIndex;
	}

	function addSlider (elm) 
	{
		if (elm.name == void) {
			elm.name = "_num_"+this.uiIndex;
		}
		var node = new Slider(this.controlLayer);
		node.issystem = elm.issys===void?false:elm.issys;
		if (node.issystem) {
			this.syscontrol[elm.name] = node;
		}
		else {
			this.names[elm.name] = node;
		}
		node.setAnchor(0,1);
		node.x = +elm.x;
		node.y = node.parent.height-elm.y-12+6;
		node.enabled = elm.enabled if elm.enabled!==void;
		if (elm.base) {
			node.loadBase(elm.base);
		}
		if (elm.graphic) {
			node.loadTabs(elm.graphic);
		}
		else {
			node.loadTabs(elm.normal,elm.on);
		}
		node.onChangeFunc = Scripts.eval(elm.onchangefunc) if elm.onchangefunc!==void;
		node.dragWidth = +elm.width if elm.width!==void;
		node.dragHeight = +elm.height if elm.height!==void;
		node.step = +elm.step if elm.step!==void;
		node.min = +elm.min if elm.min!==void;
		node.max = +elm.max if elm.max!==void;
		node.vertical = elm.vertical if elm.vertical!==void;
		node.position = elm.position===void?100:+elm.position;
		++this.uiIndex;
	}

	function addText (text,x,y) 
	{
		var node = new Label(this.chLayer);
		node.setAnchor(0,1);
		//这里还要设置文字属性
		node.font.size = this.font.size;
		node.text = text;
		node.setSizeToImageSize();
		node.x = x;
		node.y = node.parent.height-y;
		//这里需要另加字间距
		x += node.width+this.font.wordSpacing;
		if (x+node.width > this.chLayer.width) {
			x = 0;
			y += this.font.size+this.font.lineSpacing;
			if (y + this.font.size > this.chLayer.height) {
				return [0,0,true];
			}
		}
		return [x,y,false];
	}
}