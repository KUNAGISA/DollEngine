

class ActionManager
{
	var timer;
	var allActions = void;
	var lastTime;
	var timeScale = 1;
	var paused = false;
	function ActionManager () 
	{
		allActions = new Set();
		this.timer = new Timer(this.update);
		this.timer.interval = 0;
		this.timer.enabled = false;
		this.lastTime = this.timer.time;
	}

	function finalize () 
	{
		this.allActions.foreach(function (v) 
		{
			invalidate v;
		});
		invalidate allActions;
		invalidate this.timer;
	}

	function addAction (act) 
	{
		if (act.manager) {
			em("一个Action不可重复被添加");
			return;
		}
		allActions.add(act);
		act.manager = this;
		if (!this.timer.enabled) {
			this.timer.enabled = true;
			this.lastTime = this.timer.time;
		}
		Scripts.addAsyncFunction(act.initialize);
	}

	function removeAction (act) 
	{
		if (act.manager) {
			allActions.remove(act);
			act.manager = void;
			if(allActions.count == 0){
				timer.enabled = false;
				this.lastTime = 0;
			}
		}
	}

	function removeAllActions () 
	{
		allActions.foreach(function (v) 
		{
			v.manager = void;
			invalidate v;
		});
		allActions.clear();
		this.timer.enabled = false;
		this.lastTime = 0;
	}

	function update () 
	{
		var dt = this.timer.time - this.lastTime;
		dt *= this.timeScale*System.main.actionManager.timeScale;
		this.lastTime = this.timer.time;
		if (this.paused) {
			return;
		}
		allActions.foreach(function (v) 
		{
			if (v.paused) {
				return;
			}
			var vt = this[0] * v.timeScale;
		    v.time += vt;
		    if (v.time >= v.duration) {
			    v.update(1);
			    v.onActionEnded();
			    invalidate v;
		    }
		    else {
		    	v.update(v.time/v.duration);
		    }
		} incontextof [dt]);
	}

}